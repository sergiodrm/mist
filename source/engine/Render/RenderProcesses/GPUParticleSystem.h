// Autogenerated code for Mist project
// Header file

#pragma once
#include "Render/Shader.h"
#include "Render/Globals.h"
#include "Render/VulkanBuffer.h"
#include "Render/RenderAPI.h"
#include "Render/RenderTarget.h"
#include "Render/Texture.h"
#include <glm/glm.hpp>
#include "RenderAPI/Device.h"

namespace rendersystem
{
    class ShaderProgram;
	class RenderSystem;
}

namespace Mist
{
	struct RenderFrameContext;

	struct ParameterUBO
	{
		float DeltaTime = 0.033f;
		float Speed = 1.f;
		float MaxSpeed = 10.f;
		int32_t MovementMode = -1;
		glm::vec2 Point = glm::vec2(0.f, 0.f);
	};

	struct Particle
	{
		glm::vec2 Position;
		glm::vec2 Velocity;
		glm::vec4 Color;
	};

	class GPUParticleSystem
	{
		enum
		{
			GPU_PARTICLES_NONE = 0x00,
			GPU_PARTICLES_COMPUTE_ACTIVE = 0x01,
			GPU_PARTICLES_GRAPHICS_ACTIVE = 0x02,
			GPU_PARTICLES_ACTIVE = GPU_PARTICLES_COMPUTE_ACTIVE | GPU_PARTICLES_GRAPHICS_ACTIVE,
			GPU_PARTICLES_SHOW_RT = 0x04,
			GPU_PARTICLES_FOLLOW_MOUSE = 0x08,
			GPU_PARTICLES_REPULSE = 0x10,
			GPU_PARTICLES_RESET_PARTICLES = 0x80
		};
	public:

		GPUParticleSystem();
		void Init(rendersystem::RenderSystem* renderSystem);
#if 0
		void InitFrameData(const RenderContext& context, RenderFrameContext* frameContextArray);
#endif // 0

		void UpdateBuffers(rendersystem::RenderSystem* renderSystem);
		void Dispatch(rendersystem::RenderSystem* renderSystem);
		void Draw(rendersystem::RenderSystem* renderSystem);
		void Destroy(rendersystem::RenderSystem* renderSystem);
		void ImGuiDraw();
		void ResetParticles(render::Device* device);

	private:
		rendersystem::ShaderProgram* m_computeShader;
		VkDescriptorSet m_singleBufferDescriptorSet;
		render::BufferHandle m_particlesBuffer;
		render::TextureHandle m_circleGradientTexture;

		rendersystem::ShaderProgram* m_graphicsShader;
		render::RenderTargetHandle m_renderTarget;

		ParameterUBO m_params;
		int32_t m_flags;
		uint32_t m_particleCount;
	};


    class Gol
    {
    public:
        Gol(const RenderContext* context)
            : m_context(context), m_rt(nullptr) {
        }

        void Init(uint32_t width, uint32_t height);
        void Destroy();

        void Compute();
		void ImGuiDraw();
		void Reset();
    private:

		void InitBuffers(uint32_t width, uint32_t height);
		void CreateDescriptorBuffers();

		glm::vec2 CalculateTexCoordsFromPixel(uint32_t x, uint32_t y) const;

        const RenderContext* m_context;
		uint32_t m_width;
		uint32_t m_height;
		render::BufferHandle m_buffers[2];
		VkDescriptorSet m_bufferBinding[2];
		VkDescriptorSet m_drawBinding[2];
		render::RenderTargetHandle m_rt;
        rendersystem::ShaderProgram* m_computeShader;
		rendersystem::ShaderProgram* m_drawShader;

		uint64_t m_counter;
		uint64_t m_period;
		bool m_paused;
		bool m_dirtyState;
		uint32_t m_modifiedWidth;
        uint32_t m_modifiedHeight;
		float m_drawScale;
    };
}
