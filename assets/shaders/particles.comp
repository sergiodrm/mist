#version 460

struct Particle
{
    vec2 Position;
    vec2 Velocity;
    vec4 Color;
};

layout (std140, binding = 0) uniform ParameterUBO
{
    float DeltaTime;
    float Speed;
    float MaxSpeed;
    int MovementMode;
    vec2 Point;
};

layout(std140, binding = 1) buffer ParticleBuffer
{
    Particle Particles[];
};

layout (local_size_x= 256, local_size_y = 1, local_size_z = 1) in;

#define REPULSION_FACTOR 0.01035f
#define ALPHA_RADIUS 0.33f

vec2 Repulsion(vec2 Position, vec2 Center)
{
    vec2 Diff = Center - Position;
    float Distance = length(Diff);
    float dir = float(MovementMode) * -1.f;
    return Diff / (Distance*Distance*Distance) * REPULSION_FACTOR * dir;
}


#define particleIn Particles[index]
#define particleOut Particles[index]


void main()
{
    uint index = gl_GlobalInvocationID.x;

    vec2 velocity = min(particleIn.Velocity * Speed, vec2(MaxSpeed));
    velocity += (Repulsion(particleIn.Position, Point));
    particleOut.Position = particleIn.Position + velocity * DeltaTime;
    particleOut.Velocity = particleIn.Velocity;
    if (particleOut.Position.x > 1.f || particleOut.Position.x < -1.f)
    {
        //particleOut.Position.x = -1.f;
        particleOut.Velocity.x *= -1.f; 
    }
    if (particleOut.Position.y > 1.f || particleOut.Position.y < -1.f)
    {
        //particleOut.Position.y = -1.f;
        particleOut.Velocity.y *= -1.f;
    }
}
