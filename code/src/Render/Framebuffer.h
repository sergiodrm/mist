// Autogenerated code for Mist project
// Header file

#pragma once

#include <vulkan/vulkan.h>
#include <vector>
#include "Render/RenderTypes.h"
#include "Core/Types.h"

namespace Mist
{
	struct RenderContext;
	struct AllocatedImage;
	enum EFormat;

	class Framebuffer
	{
		Framebuffer(const Framebuffer&) = delete;
		Framebuffer(Framebuffer&&) = delete;
	public:

		struct Builder
		{
			Builder(const RenderContext& renderContext, const tExtent3D& extent);
			~Builder();

			void CreateAttachment(EFormat format, EImageUsage usage);
			void AddAttachment(VkImageView imageView, bool freeOnDestroy = false);

			bool Build(Framebuffer& framebuffer, VkRenderPass renderPass);
		private:
			void MarkToClean(uint32_t index);


			tDynArray<VkImageView> m_attachments;
			tDynArray<AllocatedImage> m_imageArray;
			tExtent3D m_extent;
			uint8_t m_cleanFlags;
			const RenderContext& m_renderContext;
		};

		Framebuffer() = default;
		~Framebuffer();
		void Destroy(const RenderContext& renderContext);

		VkFramebuffer GetFramebufferHandle() const;
		uint32_t GetWidth() const { return m_extent.width; }
		uint32_t GetHeight() const { return m_extent.height; }
		VkImageView GetImageViewAt(uint32_t index) const { return m_attachmentViewArray[index]; }
	private:
		VkFramebuffer m_framebuffer;
		tExtent3D m_extent;
		uint8_t m_cleanFlags;

		tDynArray<AllocatedImage> m_imageArray;
		tDynArray<VkImageView> m_attachmentViewArray;
	};
}
