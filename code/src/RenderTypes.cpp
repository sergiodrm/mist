#include "RenderTypes.h"
#include "RenderHandle.h"
#include "InitVulkanTypes.h"
#include "VulkanRenderEngine.h"
#include "Debug.h"
#include "RenderContext.h"
#include "Logger.h"

#define VK_RESULT_LIST \
	_X_(VK_SUCCESS )\
	_X_(VK_NOT_READY )\
	_X_(VK_TIMEOUT )\
	_X_(VK_EVENT_SET )\
	_X_(VK_EVENT_RESET )\
	_X_(VK_INCOMPLETE )\
	_X_(VK_ERROR_OUT_OF_HOST_MEMORY)\
	_X_(VK_ERROR_OUT_OF_DEVICE_MEMORY)\
	_X_(VK_ERROR_INITIALIZATION_FAILED)\
	_X_(VK_ERROR_DEVICE_LOST )\
	_X_(VK_ERROR_MEMORY_MAP_FAILED)\
	_X_(VK_ERROR_LAYER_NOT_PRESENT)\
	_X_(VK_ERROR_EXTENSION_NOT_PRESENT)\
	_X_(VK_ERROR_FEATURE_NOT_PRESENT)\
	_X_(VK_ERROR_INCOMPATIBLE_DRIVER)\
	_X_(VK_ERROR_TOO_MANY_OBJECTS)\
	_X_(VK_ERROR_FORMAT_NOT_SUPPORTED)\
	_X_(VK_ERROR_FRAGMENTED_POOL)\
	_X_(VK_ERROR_UNKNOWN)\
	_X_(VK_ERROR_OUT_OF_POOL_MEMORY)\
	_X_(VK_ERROR_INVALID_EXTERNAL_HANDLE)\
	_X_(VK_ERROR_FRAGMENTATION)\
	_X_(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS)\
	_X_(VK_PIPELINE_COMPILE_REQUIRED)\
	_X_(VK_ERROR_SURFACE_LOST_KHR)\
	_X_(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR)\
	_X_(VK_SUBOPTIMAL_KHR )\
	_X_(VK_ERROR_OUT_OF_DATE_KHR )\
	_X_(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR )\
	_X_(VK_ERROR_VALIDATION_FAILED_EXT )\
	_X_(VK_ERROR_INVALID_SHADER_NV )\
	_X_(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT )\
	_X_(VK_ERROR_NOT_PERMITTED_KHR )\
	_X_(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT )\
	_X_(VK_THREAD_IDLE_KHR )\
	_X_(VK_THREAD_DONE_KHR )\
	_X_(VK_OPERATION_DEFERRED_KHR )\
	_X_(VK_OPERATION_NOT_DEFERRED_KHR )\
	_X_(VK_ERROR_COMPRESSION_EXHAUSTED_EXT )\
	_X_(VK_RESULT_MAX_ENUM)

template <>
struct std::hash<Mist::RenderHandle>
{
	std::size_t operator()(const Mist::RenderHandle& key) const
	{
		return hash<uint32_t>()(key.Handle);
	}
};

namespace Mist
{
	const Color Color::Red = 0xff0000ff;
	const Color Color::Green = 0x00ff00ff;
	const Color Color::Blue = 0x0000ffff;

	uint32_t Color::R() const
	{
		return (m_color & 0xff000000) >> 24;
	}
	uint32_t Color::G() const
	{
		return (m_color & 0x00ff0000) >> 16;
	}
	uint32_t Color::B() const
	{
		return (m_color & 0x0000ff00) >> 8;
	}
	uint32_t Color::A() const
	{
		return (m_color & 0x000000ff);
	}

	float Color::NormR() const
	{
		return (float)R() / 255.f;
	}

	float Color::NormG() const
	{
		return (float)G() / 255.f;
	}

	float Color::NormB() const
	{
		return (float)B() / 255.f;
	}

	float Color::NormA() const
	{
		return (float)A() / 255.f;
	}

	void Color::Normalize(float colorOut[4]) const
	{
		colorOut[0] = NormR();
		colorOut[1] = NormG();
		colorOut[2] = NormB();
		colorOut[3] = NormA();
	}

	void Color::Set(uint32_t r, uint32_t g, uint32_t b, uint32_t a)
	{
		uint32_t m = 0x000000ff;
		m_color = (a & m) | ((b & m) << 8) | ((g & m) << 16) | ((r & m) << 24);
	}


	namespace tovk
	{
		VkImageLayout GetImageLayout(EImageLayout layout)
		{
			switch (layout)
			{
				case IMAGE_LAYOUT_UNDEFINED: return VK_IMAGE_LAYOUT_UNDEFINED;
				case IMAGE_LAYOUT_GENERAL: return VK_IMAGE_LAYOUT_GENERAL;
				case IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
				case IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: return VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
				case IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: return VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
				case IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
				case IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: return VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
				case IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: return VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
				case IMAGE_LAYOUT_PREINITIALIZED: return VK_IMAGE_LAYOUT_PREINITIALIZED;
				case IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: return VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
				case IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: return VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
				case IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: return VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
				case IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: return VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
				case IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: return VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
				case IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: return VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
				case IMAGE_LAYOUT_READ_ONLY_OPTIMAL: return VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
				case IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: return VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
				case IMAGE_LAYOUT_PRESENT_SRC_KHR: return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
				case IMAGE_LAYOUT_SHARED_PRESENT_KHR: return VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR;
				case IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: return VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT;
				case IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: return VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
				case IMAGE_LAYOUT_MAX_ENUM: return VK_IMAGE_LAYOUT_MAX_ENUM;
			}
			Logf(LogLevel::Error, "Invalid layout type: %d\n", layout);
			return VK_IMAGE_LAYOUT_MAX_ENUM;
		}


		VkFormat GetFormat(EFormat format)
		{
			switch (format)
			{
			case FORMAT_UNDEFINED: return VK_FORMAT_UNDEFINED;
			case FORMAT_R4G4_UNORM_PACK8: return VK_FORMAT_R4G4_UNORM_PACK8;
			case FORMAT_R4G4B4A4_UNORM_PACK16: return VK_FORMAT_R4G4B4A4_UNORM_PACK16;
			case FORMAT_B4G4R4A4_UNORM_PACK16: return VK_FORMAT_B4G4R4A4_UNORM_PACK16;
			case FORMAT_R5G6B5_UNORM_PACK16: return VK_FORMAT_R5G6B5_UNORM_PACK16;
			case FORMAT_B5G6R5_UNORM_PACK16: return VK_FORMAT_B5G6R5_UNORM_PACK16;
			case FORMAT_R5G5B5A1_UNORM_PACK16: return VK_FORMAT_R5G5B5A1_UNORM_PACK16;
			case FORMAT_B5G5R5A1_UNORM_PACK16: return VK_FORMAT_B5G5R5A1_UNORM_PACK16;
			case FORMAT_A1R5G5B5_UNORM_PACK16: return VK_FORMAT_A1R5G5B5_UNORM_PACK16;
			case FORMAT_R8_UNORM: return VK_FORMAT_R8_UNORM;
			case FORMAT_R8_SNORM: return VK_FORMAT_R8_SNORM;
			case FORMAT_R8_USCALED: return VK_FORMAT_R8_USCALED;
			case FORMAT_R8_SSCALED: return VK_FORMAT_R8_SSCALED;
			case FORMAT_R8_UINT: return VK_FORMAT_R8_UINT;
			case FORMAT_R8_SINT: return VK_FORMAT_R8_SINT;
			case FORMAT_R8_SRGB: return VK_FORMAT_R8_SRGB;
			case FORMAT_R8G8_UNORM: return VK_FORMAT_R8G8_UNORM;
			case FORMAT_R8G8_SNORM: return VK_FORMAT_R8G8_SNORM;
			case FORMAT_R8G8_USCALED: return VK_FORMAT_R8G8_USCALED;
			case FORMAT_R8G8_SSCALED: return VK_FORMAT_R8G8_SSCALED;
			case FORMAT_R8G8_UINT: return VK_FORMAT_R8G8_UINT;
			case FORMAT_R8G8_SINT: return VK_FORMAT_R8G8_SINT;
			case FORMAT_R8G8_SRGB: return VK_FORMAT_R8G8_SRGB;
			case FORMAT_R8G8B8_UNORM: return VK_FORMAT_R8G8B8_UNORM;
			case FORMAT_R8G8B8_SNORM: return VK_FORMAT_R8G8B8_SNORM;
			case FORMAT_R8G8B8_USCALED: return VK_FORMAT_R8G8B8_USCALED;
			case FORMAT_R8G8B8_SSCALED: return VK_FORMAT_R8G8B8_SSCALED;
			case FORMAT_R8G8B8_UINT: return VK_FORMAT_R8G8B8_UINT;
			case FORMAT_R8G8B8_SINT: return VK_FORMAT_R8G8B8_SINT;
			case FORMAT_R8G8B8_SRGB: return VK_FORMAT_R8G8B8_SRGB;
			case FORMAT_B8G8R8_UNORM: return VK_FORMAT_B8G8R8_UNORM;
			case FORMAT_B8G8R8_SNORM: return VK_FORMAT_B8G8R8_SNORM;
			case FORMAT_B8G8R8_USCALED: return VK_FORMAT_B8G8R8_USCALED;
			case FORMAT_B8G8R8_SSCALED: return VK_FORMAT_B8G8R8_SSCALED;
			case FORMAT_B8G8R8_UINT: return VK_FORMAT_B8G8R8_UINT;
			case FORMAT_B8G8R8_SINT: return VK_FORMAT_B8G8R8_SINT;
			case FORMAT_B8G8R8_SRGB: return VK_FORMAT_B8G8R8_SRGB;
			case FORMAT_R8G8B8A8_UNORM: return VK_FORMAT_R8G8B8A8_UNORM;
			case FORMAT_R8G8B8A8_SNORM: return VK_FORMAT_R8G8B8A8_SNORM;
			case FORMAT_R8G8B8A8_USCALED: return VK_FORMAT_R8G8B8A8_USCALED;
			case FORMAT_R8G8B8A8_SSCALED: return VK_FORMAT_R8G8B8A8_SSCALED;
			case FORMAT_R8G8B8A8_UINT: return VK_FORMAT_R8G8B8A8_UINT;
			case FORMAT_R8G8B8A8_SINT: return VK_FORMAT_R8G8B8A8_SINT;
			case FORMAT_R8G8B8A8_SRGB: return VK_FORMAT_R8G8B8A8_SRGB;
			case FORMAT_B8G8R8A8_UNORM: return VK_FORMAT_B8G8R8A8_UNORM;
			case FORMAT_B8G8R8A8_SNORM: return VK_FORMAT_B8G8R8A8_SNORM;
			case FORMAT_B8G8R8A8_USCALED: return VK_FORMAT_B8G8R8A8_USCALED;
			case FORMAT_B8G8R8A8_SSCALED: return VK_FORMAT_B8G8R8A8_SSCALED;
			case FORMAT_B8G8R8A8_UINT: return VK_FORMAT_B8G8R8A8_UINT;
			case FORMAT_B8G8R8A8_SINT: return VK_FORMAT_B8G8R8A8_SINT;
			case FORMAT_B8G8R8A8_SRGB: return VK_FORMAT_B8G8R8A8_SRGB;
			case FORMAT_A8B8G8R8_UNORM_PACK32: return VK_FORMAT_A8B8G8R8_UNORM_PACK32;
			case FORMAT_A8B8G8R8_SNORM_PACK32: return VK_FORMAT_A8B8G8R8_SNORM_PACK32;
			case FORMAT_A8B8G8R8_USCALED_PACK32: return VK_FORMAT_A8B8G8R8_USCALED_PACK32;
			case FORMAT_A8B8G8R8_SSCALED_PACK32: return VK_FORMAT_A8B8G8R8_SSCALED_PACK32;
			case FORMAT_A8B8G8R8_UINT_PACK32: return VK_FORMAT_A8B8G8R8_UINT_PACK32;
			case FORMAT_A8B8G8R8_SINT_PACK32: return VK_FORMAT_A8B8G8R8_SINT_PACK32;
			case FORMAT_A8B8G8R8_SRGB_PACK32: return VK_FORMAT_A8B8G8R8_SRGB_PACK32;
			case FORMAT_A2R10G10B10_UNORM_PACK32: return VK_FORMAT_A2R10G10B10_UNORM_PACK32;
			case FORMAT_A2R10G10B10_SNORM_PACK32: return VK_FORMAT_A2R10G10B10_SNORM_PACK32;
			case FORMAT_A2R10G10B10_USCALED_PACK32: return VK_FORMAT_A2R10G10B10_USCALED_PACK32;
			case FORMAT_A2R10G10B10_SSCALED_PACK32: return VK_FORMAT_A2R10G10B10_SSCALED_PACK32;
			case FORMAT_A2R10G10B10_UINT_PACK32: return VK_FORMAT_A2R10G10B10_UINT_PACK32;
			case FORMAT_A2R10G10B10_SINT_PACK32: return VK_FORMAT_A2R10G10B10_SINT_PACK32;
			case FORMAT_A2B10G10R10_UNORM_PACK32: return VK_FORMAT_A2B10G10R10_UNORM_PACK32;
			case FORMAT_A2B10G10R10_SNORM_PACK32: return VK_FORMAT_A2B10G10R10_SNORM_PACK32;
			case FORMAT_A2B10G10R10_USCALED_PACK32: return VK_FORMAT_A2B10G10R10_USCALED_PACK32;
			case FORMAT_A2B10G10R10_SSCALED_PACK32: return VK_FORMAT_A2B10G10R10_SSCALED_PACK32;
			case FORMAT_A2B10G10R10_UINT_PACK32: return VK_FORMAT_A2B10G10R10_UINT_PACK32;
			case FORMAT_A2B10G10R10_SINT_PACK32: return VK_FORMAT_A2B10G10R10_SINT_PACK32;
			case FORMAT_R16_UNORM: return VK_FORMAT_R16_UNORM;
			case FORMAT_R16_SNORM: return VK_FORMAT_R16_SNORM;
			case FORMAT_R16_USCALED: return VK_FORMAT_R16_USCALED;
			case FORMAT_R16_SSCALED: return VK_FORMAT_R16_SSCALED;
			case FORMAT_R16_UINT: return VK_FORMAT_R16_UINT;
			case FORMAT_R16_SINT: return VK_FORMAT_R16_SINT;
			case FORMAT_R16_SFLOAT: return VK_FORMAT_R16_SFLOAT;
			case FORMAT_R16G16_UNORM: return VK_FORMAT_R16G16_UNORM;
			case FORMAT_R16G16_SNORM: return VK_FORMAT_R16G16_SNORM;
			case FORMAT_R16G16_USCALED: return VK_FORMAT_R16G16_USCALED;
			case FORMAT_R16G16_SSCALED: return VK_FORMAT_R16G16_SSCALED;
			case FORMAT_R16G16_UINT: return VK_FORMAT_R16G16_UINT;
			case FORMAT_R16G16_SINT: return VK_FORMAT_R16G16_SINT;
			case FORMAT_R16G16_SFLOAT: return VK_FORMAT_R16G16_SFLOAT;
			case FORMAT_R16G16B16_UNORM: return VK_FORMAT_R16G16B16_UNORM;
			case FORMAT_R16G16B16_SNORM: return VK_FORMAT_R16G16B16_SNORM;
			case FORMAT_R16G16B16_USCALED: return VK_FORMAT_R16G16B16_USCALED;
			case FORMAT_R16G16B16_SSCALED: return VK_FORMAT_R16G16B16_SSCALED;
			case FORMAT_R16G16B16_UINT: return VK_FORMAT_R16G16B16_UINT;
			case FORMAT_R16G16B16_SINT: return VK_FORMAT_R16G16B16_SINT;
			case FORMAT_R16G16B16_SFLOAT: return VK_FORMAT_R16G16B16_SFLOAT;
			case FORMAT_R16G16B16A16_UNORM: return VK_FORMAT_R16G16B16A16_UNORM;
			case FORMAT_R16G16B16A16_SNORM: return VK_FORMAT_R16G16B16A16_SNORM;
			case FORMAT_R16G16B16A16_USCALED: return VK_FORMAT_R16G16B16A16_USCALED;
			case FORMAT_R16G16B16A16_SSCALED: return VK_FORMAT_R16G16B16A16_SSCALED;
			case FORMAT_R16G16B16A16_UINT: return VK_FORMAT_R16G16B16A16_UINT;
			case FORMAT_R16G16B16A16_SINT: return VK_FORMAT_R16G16B16A16_SINT;
			case FORMAT_R16G16B16A16_SFLOAT: return VK_FORMAT_R16G16B16A16_SFLOAT;
			case FORMAT_R32_UINT: return VK_FORMAT_R32_UINT;
			case FORMAT_R32_SINT: return VK_FORMAT_R32_SINT;
			case FORMAT_R32_SFLOAT: return VK_FORMAT_R32_SFLOAT;
			case FORMAT_R32G32_UINT: return VK_FORMAT_R32G32_UINT;
			case FORMAT_R32G32_SINT: return VK_FORMAT_R32G32_SINT;
			case FORMAT_R32G32_SFLOAT: return VK_FORMAT_R32G32_SFLOAT;
			case FORMAT_R32G32B32_UINT: return VK_FORMAT_R32G32B32_UINT;
			case FORMAT_R32G32B32_SINT: return VK_FORMAT_R32G32B32_SINT;
			case FORMAT_R32G32B32_SFLOAT: return VK_FORMAT_R32G32B32_SFLOAT;
			case FORMAT_R32G32B32A32_UINT: return VK_FORMAT_R32G32B32A32_UINT;
			case FORMAT_R32G32B32A32_SINT: return VK_FORMAT_R32G32B32A32_SINT;
			case FORMAT_R32G32B32A32_SFLOAT: return VK_FORMAT_R32G32B32A32_SFLOAT;
			case FORMAT_R64_UINT: return VK_FORMAT_R64_UINT;
			case FORMAT_R64_SINT: return VK_FORMAT_R64_SINT;
			case FORMAT_R64_SFLOAT: return VK_FORMAT_R64_SFLOAT;
			case FORMAT_R64G64_UINT: return VK_FORMAT_R64G64_UINT;
			case FORMAT_R64G64_SINT: return VK_FORMAT_R64G64_SINT;
			case FORMAT_R64G64_SFLOAT: return VK_FORMAT_R64G64_SFLOAT;
			case FORMAT_R64G64B64_UINT: return VK_FORMAT_R64G64B64_UINT;
			case FORMAT_R64G64B64_SINT: return VK_FORMAT_R64G64B64_SINT;
			case FORMAT_R64G64B64_SFLOAT: return VK_FORMAT_R64G64B64_SFLOAT;
			case FORMAT_R64G64B64A64_UINT: return VK_FORMAT_R64G64B64A64_UINT;
			case FORMAT_R64G64B64A64_SINT: return VK_FORMAT_R64G64B64A64_SINT;
			case FORMAT_R64G64B64A64_SFLOAT: return VK_FORMAT_R64G64B64A64_SFLOAT;
			case FORMAT_B10G11R11_UFLOAT_PACK32: return VK_FORMAT_B10G11R11_UFLOAT_PACK32;
			case FORMAT_E5B9G9R9_UFLOAT_PACK32: return VK_FORMAT_E5B9G9R9_UFLOAT_PACK32;
			case FORMAT_D16_UNORM: return VK_FORMAT_D16_UNORM;
			case FORMAT_X8_D24_UNORM_PACK32: return VK_FORMAT_X8_D24_UNORM_PACK32;
			case FORMAT_D32_SFLOAT: return VK_FORMAT_D32_SFLOAT;
			case FORMAT_S8_UINT: return VK_FORMAT_S8_UINT;
			case FORMAT_D16_UNORM_S8_UINT: return VK_FORMAT_D16_UNORM_S8_UINT;
			case FORMAT_D24_UNORM_S8_UINT: return VK_FORMAT_D24_UNORM_S8_UINT;
			case FORMAT_D32_SFLOAT_S8_UINT: return VK_FORMAT_D32_SFLOAT_S8_UINT;
			case FORMAT_BC1_RGB_UNORM_BLOCK: return VK_FORMAT_BC1_RGB_UNORM_BLOCK;
			case FORMAT_BC1_RGB_SRGB_BLOCK: return VK_FORMAT_BC1_RGB_SRGB_BLOCK;
			case FORMAT_BC1_RGBA_UNORM_BLOCK: return VK_FORMAT_BC1_RGBA_UNORM_BLOCK;
			case FORMAT_BC1_RGBA_SRGB_BLOCK: return VK_FORMAT_BC1_RGBA_SRGB_BLOCK;
			case FORMAT_BC2_UNORM_BLOCK: return VK_FORMAT_BC2_UNORM_BLOCK;
			case FORMAT_BC2_SRGB_BLOCK: return VK_FORMAT_BC2_SRGB_BLOCK;
			case FORMAT_BC3_UNORM_BLOCK: return VK_FORMAT_BC3_UNORM_BLOCK;
			case FORMAT_BC3_SRGB_BLOCK: return VK_FORMAT_BC3_SRGB_BLOCK;
			case FORMAT_BC4_UNORM_BLOCK: return VK_FORMAT_BC4_UNORM_BLOCK;
			case FORMAT_BC4_SNORM_BLOCK: return VK_FORMAT_BC4_SNORM_BLOCK;
			case FORMAT_BC5_UNORM_BLOCK: return VK_FORMAT_BC5_UNORM_BLOCK;
			case FORMAT_BC5_SNORM_BLOCK: return VK_FORMAT_BC5_SNORM_BLOCK;
			case FORMAT_BC6H_UFLOAT_BLOCK: return VK_FORMAT_BC6H_UFLOAT_BLOCK;
			case FORMAT_BC6H_SFLOAT_BLOCK: return VK_FORMAT_BC6H_SFLOAT_BLOCK;
			case FORMAT_BC7_UNORM_BLOCK: return VK_FORMAT_BC7_UNORM_BLOCK;
			case FORMAT_BC7_SRGB_BLOCK: return VK_FORMAT_BC7_SRGB_BLOCK;
			case FORMAT_ETC2_R8G8B8_UNORM_BLOCK: return VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK;
			case FORMAT_ETC2_R8G8B8_SRGB_BLOCK: return VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK;
			case FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: return VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK;
			case FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: return VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK;
			case FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: return VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK;
			case FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: return VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK;
			case FORMAT_EAC_R11_UNORM_BLOCK: return VK_FORMAT_EAC_R11_UNORM_BLOCK;
			case FORMAT_EAC_R11_SNORM_BLOCK: return VK_FORMAT_EAC_R11_SNORM_BLOCK;
			case FORMAT_EAC_R11G11_UNORM_BLOCK: return VK_FORMAT_EAC_R11G11_UNORM_BLOCK;
			case FORMAT_EAC_R11G11_SNORM_BLOCK: return VK_FORMAT_EAC_R11G11_SNORM_BLOCK;
			case FORMAT_ASTC_4x4_UNORM_BLOCK: return VK_FORMAT_ASTC_4x4_UNORM_BLOCK;
			case FORMAT_ASTC_4x4_SRGB_BLOCK: return VK_FORMAT_ASTC_4x4_SRGB_BLOCK;
			case FORMAT_ASTC_5x4_UNORM_BLOCK: return VK_FORMAT_ASTC_5x4_UNORM_BLOCK;
			case FORMAT_ASTC_5x4_SRGB_BLOCK: return VK_FORMAT_ASTC_5x4_SRGB_BLOCK;
			case FORMAT_ASTC_5x5_UNORM_BLOCK: return VK_FORMAT_ASTC_5x5_UNORM_BLOCK;
			case FORMAT_ASTC_5x5_SRGB_BLOCK: return VK_FORMAT_ASTC_5x5_SRGB_BLOCK;
			case FORMAT_ASTC_6x5_UNORM_BLOCK: return VK_FORMAT_ASTC_6x5_UNORM_BLOCK;
			case FORMAT_ASTC_6x5_SRGB_BLOCK: return VK_FORMAT_ASTC_6x5_SRGB_BLOCK;
			case FORMAT_ASTC_6x6_UNORM_BLOCK: return VK_FORMAT_ASTC_6x6_UNORM_BLOCK;
			case FORMAT_ASTC_6x6_SRGB_BLOCK: return VK_FORMAT_ASTC_6x6_SRGB_BLOCK;
			case FORMAT_ASTC_8x5_UNORM_BLOCK: return VK_FORMAT_ASTC_8x5_UNORM_BLOCK;
			case FORMAT_ASTC_8x5_SRGB_BLOCK: return VK_FORMAT_ASTC_8x5_SRGB_BLOCK;
			case FORMAT_ASTC_8x6_UNORM_BLOCK: return VK_FORMAT_ASTC_8x6_UNORM_BLOCK;
			case FORMAT_ASTC_8x6_SRGB_BLOCK: return VK_FORMAT_ASTC_8x6_SRGB_BLOCK;
			case FORMAT_ASTC_8x8_UNORM_BLOCK: return VK_FORMAT_ASTC_8x8_UNORM_BLOCK;
			case FORMAT_ASTC_8x8_SRGB_BLOCK: return VK_FORMAT_ASTC_8x8_SRGB_BLOCK;
			case FORMAT_ASTC_10x5_UNORM_BLOCK: return VK_FORMAT_ASTC_10x5_UNORM_BLOCK;
			case FORMAT_ASTC_10x5_SRGB_BLOCK: return VK_FORMAT_ASTC_10x5_SRGB_BLOCK;
			case FORMAT_ASTC_10x6_UNORM_BLOCK: return VK_FORMAT_ASTC_10x6_UNORM_BLOCK;
			case FORMAT_ASTC_10x6_SRGB_BLOCK: return VK_FORMAT_ASTC_10x6_SRGB_BLOCK;
			case FORMAT_ASTC_10x8_UNORM_BLOCK: return VK_FORMAT_ASTC_10x8_UNORM_BLOCK;
			case FORMAT_ASTC_10x8_SRGB_BLOCK: return VK_FORMAT_ASTC_10x8_SRGB_BLOCK;
			case FORMAT_ASTC_10x10_UNORM_BLOCK: return VK_FORMAT_ASTC_10x10_UNORM_BLOCK;
			case FORMAT_ASTC_10x10_SRGB_BLOCK: return VK_FORMAT_ASTC_10x10_SRGB_BLOCK;
			case FORMAT_ASTC_12x10_UNORM_BLOCK: return VK_FORMAT_ASTC_12x10_UNORM_BLOCK;
			case FORMAT_ASTC_12x10_SRGB_BLOCK: return VK_FORMAT_ASTC_12x10_SRGB_BLOCK;
			case FORMAT_ASTC_12x12_UNORM_BLOCK: return VK_FORMAT_ASTC_12x12_UNORM_BLOCK;
			case FORMAT_ASTC_12x12_SRGB_BLOCK: return VK_FORMAT_ASTC_12x12_SRGB_BLOCK;
			case FORMAT_G8B8G8R8_422_UNORM: return VK_FORMAT_G8B8G8R8_422_UNORM;
			case FORMAT_B8G8R8G8_422_UNORM: return VK_FORMAT_B8G8R8G8_422_UNORM;
			case FORMAT_G8_B8_R8_3PLANE_420_UNORM: return VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM;
			case FORMAT_G8_B8R8_2PLANE_420_UNORM: return VK_FORMAT_G8_B8R8_2PLANE_420_UNORM;
			case FORMAT_G8_B8_R8_3PLANE_422_UNORM: return VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM;
			case FORMAT_G8_B8R8_2PLANE_422_UNORM: return VK_FORMAT_G8_B8R8_2PLANE_422_UNORM;
			case FORMAT_G8_B8_R8_3PLANE_444_UNORM: return VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM;
			case FORMAT_R10X6_UNORM_PACK16: return VK_FORMAT_R10X6_UNORM_PACK16;
			case FORMAT_R10X6G10X6_UNORM_2PACK16: return VK_FORMAT_R10X6G10X6_UNORM_2PACK16;
			case FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: return VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
			case FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: return VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
			case FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: return VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
			case FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
			case FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
			case FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
			case FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
			case FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: return VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
			case FORMAT_R12X4_UNORM_PACK16: return VK_FORMAT_R12X4_UNORM_PACK16;
			case FORMAT_R12X4G12X4_UNORM_2PACK16: return VK_FORMAT_R12X4G12X4_UNORM_2PACK16;
			case FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: return VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
			case FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: return VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
			case FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: return VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
			case FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
			case FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
			case FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
			case FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
			case FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: return VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
			case FORMAT_G16B16G16R16_422_UNORM: return VK_FORMAT_G16B16G16R16_422_UNORM;
			case FORMAT_B16G16R16G16_422_UNORM: return VK_FORMAT_B16G16R16G16_422_UNORM;
			case FORMAT_G16_B16_R16_3PLANE_420_UNORM: return VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM;
			case FORMAT_G16_B16R16_2PLANE_420_UNORM: return VK_FORMAT_G16_B16R16_2PLANE_420_UNORM;
			case FORMAT_G16_B16_R16_3PLANE_422_UNORM: return VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM;
			case FORMAT_G16_B16R16_2PLANE_422_UNORM: return VK_FORMAT_G16_B16R16_2PLANE_422_UNORM;
			case FORMAT_G16_B16_R16_3PLANE_444_UNORM: return VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM;
			case FORMAT_G8_B8R8_2PLANE_444_UNORM: return VK_FORMAT_G8_B8R8_2PLANE_444_UNORM;
			case FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: return VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16;
			case FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: return VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16;
			case FORMAT_G16_B16R16_2PLANE_444_UNORM: return VK_FORMAT_G16_B16R16_2PLANE_444_UNORM;
			case FORMAT_A4R4G4B4_UNORM_PACK16: return VK_FORMAT_A4R4G4B4_UNORM_PACK16;
			case FORMAT_A4B4G4R4_UNORM_PACK16: return VK_FORMAT_A4B4G4R4_UNORM_PACK16;
			case FORMAT_ASTC_4x4_SFLOAT_BLOCK: return VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK;
			case FORMAT_ASTC_5x4_SFLOAT_BLOCK: return VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK;
			case FORMAT_ASTC_5x5_SFLOAT_BLOCK: return VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK;
			case FORMAT_ASTC_6x5_SFLOAT_BLOCK: return VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK;
			case FORMAT_ASTC_6x6_SFLOAT_BLOCK: return VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK;
			case FORMAT_ASTC_8x5_SFLOAT_BLOCK: return VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK;
			case FORMAT_ASTC_8x6_SFLOAT_BLOCK: return VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK;
			case FORMAT_ASTC_8x8_SFLOAT_BLOCK: return VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK;
			case FORMAT_ASTC_10x5_SFLOAT_BLOCK: return VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK;
			case FORMAT_ASTC_10x6_SFLOAT_BLOCK: return VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK;
			case FORMAT_ASTC_10x8_SFLOAT_BLOCK: return VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK;
			case FORMAT_ASTC_10x10_SFLOAT_BLOCK: return VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK;
			case FORMAT_ASTC_12x10_SFLOAT_BLOCK: return VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK;
			case FORMAT_ASTC_12x12_SFLOAT_BLOCK: return VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK;
			case FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: return VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG;
			case FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: return VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG;
			case FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: return VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG;
			case FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: return VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG;
			case FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: return VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG;
			case FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: return VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG;
			case FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: return VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG;
			case FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: return VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG;
			}
			Logf(LogLevel::Error, "Invalid format type: %d\n", format);
			check(false && "Invalid format type.");
			return VK_FORMAT_UNDEFINED;
		}


		VkImageUsageFlags GetImageUsage(EImageUsage usage)
		{
#if 0
			VkImageUsageFlags flags = 0;
			if (usage & IMAGE_USAGE_TRANSFER_SRC_BIT) flags |= VK_IMAGE_USAGE_TRANSFER_SRC_BIT;
			if (usage & IMAGE_USAGE_TRANSFER_DST_BIT) flags |= VK_IMAGE_USAGE_TRANSFER_DST_BIT;
			if (usage & IMAGE_USAGE_SAMPLED_BIT) flags |= VK_IMAGE_USAGE_SAMPLED_BIT;
			if (usage & IMAGE_USAGE_STORAGE_BIT) flags |= VK_IMAGE_USAGE_STORAGE_BIT;
			if (usage & IMAGE_USAGE_COLOR_ATTACHMENT_BIT) flags |= VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
			if (usage & IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT) flags |= VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;
			if (usage & IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT) flags |= VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT;
			if (usage & IMAGE_USAGE_INPUT_ATTACHMENT_BIT) flags |= VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT;
			if (usage & IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT) flags |= VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT;
			if (usage & IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) flags |= VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
			if (usage & IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI) flags |= VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI;
			return flags;
#else
			return usage;
#endif // 0
		}


		VkImageAspectFlags GetImageAspect(EImageAspect aspect)
		{
#if 0
			VkImageAspectFlags flags = 0;
			if (aspect & IMAGE_ASPECT_COLOR_BIT) flags |= VK_IMAGE_ASPECT_COLOR_BIT;
			if (aspect & IMAGE_ASPECT_DEPTH_BIT) flags |= VK_IMAGE_ASPECT_DEPTH_BIT;
			if (aspect & IMAGE_ASPECT_STENCIL_BIT) flags |= VK_IMAGE_ASPECT_STENCIL_BIT;
			if (aspect & IMAGE_ASPECT_METADATA_BIT) flags |= VK_IMAGE_ASPECT_METADATA_BIT;
			if (aspect & IMAGE_ASPECT_PLANE_0_BIT) flags |= VK_IMAGE_ASPECT_PLANE_0_BIT;
			if (aspect & IMAGE_ASPECT_PLANE_1_BIT) flags |= VK_IMAGE_ASPECT_PLANE_1_BIT;
			if (aspect & IMAGE_ASPECT_PLANE_2_BIT) flags |= VK_IMAGE_ASPECT_PLANE_2_BIT;
			if (aspect & IMAGE_ASPECT_NONE) flags |= VK_IMAGE_ASPECT_NONE;
			if (aspect & IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT) flags |= VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT;
			if (aspect & IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT) flags |= VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT;
			if (aspect & IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT) flags |= VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT;
			if (aspect & IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT) flags |= VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT;
			return flags;
#else
			return aspect;
#endif // 0

		}



		VkFilter GetFilter(EFilterType type)
		{
			switch (type)
			{
			case FILTER_NEAREST: return VK_FILTER_NEAREST;
			case FILTER_LINEAR: return VK_FILTER_LINEAR;
			case FILTER_CUBIC: return VK_FILTER_CUBIC_IMG;
			}
			return VK_FILTER_MAX_ENUM;
		}

		VkSamplerAddressMode GetSamplerAddressMode(ESamplerAddressMode mode)
		{
			switch (mode)
			{
			case SAMPLER_ADDRESS_MODE_REPEAT: return VK_SAMPLER_ADDRESS_MODE_REPEAT;
			case SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:return VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT;
			case SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: return VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
			case SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: return VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER;
			case SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: return VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
			}
			return VK_SAMPLER_ADDRESS_MODE_MAX_ENUM;
		}

		VkSampleCountFlagBits GetSampleCount(ESampleCount sample)
		{
			switch (sample)
			{
			case SAMPLE_COUNT_1_BIT: return VK_SAMPLE_COUNT_1_BIT;
			case SAMPLE_COUNT_2_BIT: return VK_SAMPLE_COUNT_2_BIT;
			case SAMPLE_COUNT_4_BIT: return VK_SAMPLE_COUNT_4_BIT;
			case SAMPLE_COUNT_8_BIT: return VK_SAMPLE_COUNT_8_BIT;
			case SAMPLE_COUNT_16_BIT: return VK_SAMPLE_COUNT_16_BIT;
			case SAMPLE_COUNT_32_BIT: return VK_SAMPLE_COUNT_32_BIT;
			case SAMPLE_COUNT_64_BIT: return VK_SAMPLE_COUNT_64_BIT;
			case SAMPLE_COUNT_MAX: return VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM;
			}
			return VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM;
		}
	}



	namespace fromvk
	{
		EImageLayout GetImageLayout(VkImageLayout layout)
		{
			switch (layout)
			{
			case VK_IMAGE_LAYOUT_UNDEFINED: return IMAGE_LAYOUT_UNDEFINED;
			case VK_IMAGE_LAYOUT_GENERAL: return IMAGE_LAYOUT_GENERAL;
			case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: return IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
			case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: return IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
			case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: return IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
			case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: return IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
			case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: return IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
			case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: return IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
			case VK_IMAGE_LAYOUT_PREINITIALIZED: return IMAGE_LAYOUT_PREINITIALIZED;
			case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: return IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
			case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: return IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
			case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: return IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
			case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: return IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
			case VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: return IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
			case VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: return IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
			case VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: return IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
			case VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: return IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
			case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: return IMAGE_LAYOUT_PRESENT_SRC_KHR;
			case VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: return IMAGE_LAYOUT_SHARED_PRESENT_KHR;
			case VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: return IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT;
			case VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: return IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
			case VK_IMAGE_LAYOUT_MAX_ENUM: return IMAGE_LAYOUT_MAX_ENUM;
			}
			Logf(LogLevel::Error, "Invalid layout type: %d\n", layout);
			return IMAGE_LAYOUT_MAX_ENUM;
		}

		EFormat GetFormat(VkFormat format)
		{
			switch (format)
			{
			case VK_FORMAT_UNDEFINED: return FORMAT_UNDEFINED;
			case VK_FORMAT_R4G4_UNORM_PACK8: return FORMAT_R4G4_UNORM_PACK8;
			case VK_FORMAT_R4G4B4A4_UNORM_PACK16: return FORMAT_R4G4B4A4_UNORM_PACK16;
			case VK_FORMAT_B4G4R4A4_UNORM_PACK16: return FORMAT_B4G4R4A4_UNORM_PACK16;
			case VK_FORMAT_R5G6B5_UNORM_PACK16: return FORMAT_R5G6B5_UNORM_PACK16;
			case VK_FORMAT_B5G6R5_UNORM_PACK16: return FORMAT_B5G6R5_UNORM_PACK16;
			case VK_FORMAT_R5G5B5A1_UNORM_PACK16: return FORMAT_R5G5B5A1_UNORM_PACK16;
			case VK_FORMAT_B5G5R5A1_UNORM_PACK16: return FORMAT_B5G5R5A1_UNORM_PACK16;
			case VK_FORMAT_A1R5G5B5_UNORM_PACK16: return FORMAT_A1R5G5B5_UNORM_PACK16;
			case VK_FORMAT_R8_UNORM: return FORMAT_R8_UNORM;
			case VK_FORMAT_R8_SNORM: return FORMAT_R8_SNORM;
			case VK_FORMAT_R8_USCALED: return FORMAT_R8_USCALED;
			case VK_FORMAT_R8_SSCALED: return FORMAT_R8_SSCALED;
			case VK_FORMAT_R8_UINT: return FORMAT_R8_UINT;
			case VK_FORMAT_R8_SINT: return FORMAT_R8_SINT;
			case VK_FORMAT_R8_SRGB: return FORMAT_R8_SRGB;
			case VK_FORMAT_R8G8_UNORM: return FORMAT_R8G8_UNORM;
			case VK_FORMAT_R8G8_SNORM: return FORMAT_R8G8_SNORM;
			case VK_FORMAT_R8G8_USCALED: return FORMAT_R8G8_USCALED;
			case VK_FORMAT_R8G8_SSCALED: return FORMAT_R8G8_SSCALED;
			case VK_FORMAT_R8G8_UINT: return FORMAT_R8G8_UINT;
			case VK_FORMAT_R8G8_SINT: return FORMAT_R8G8_SINT;
			case VK_FORMAT_R8G8_SRGB: return FORMAT_R8G8_SRGB;
			case VK_FORMAT_R8G8B8_UNORM: return FORMAT_R8G8B8_UNORM;
			case VK_FORMAT_R8G8B8_SNORM: return FORMAT_R8G8B8_SNORM;
			case VK_FORMAT_R8G8B8_USCALED: return FORMAT_R8G8B8_USCALED;
			case VK_FORMAT_R8G8B8_SSCALED: return FORMAT_R8G8B8_SSCALED;
			case VK_FORMAT_R8G8B8_UINT: return FORMAT_R8G8B8_UINT;
			case VK_FORMAT_R8G8B8_SINT: return FORMAT_R8G8B8_SINT;
			case VK_FORMAT_R8G8B8_SRGB: return FORMAT_R8G8B8_SRGB;
			case VK_FORMAT_B8G8R8_UNORM: return FORMAT_B8G8R8_UNORM;
			case VK_FORMAT_B8G8R8_SNORM: return FORMAT_B8G8R8_SNORM;
			case VK_FORMAT_B8G8R8_USCALED: return FORMAT_B8G8R8_USCALED;
			case VK_FORMAT_B8G8R8_SSCALED: return FORMAT_B8G8R8_SSCALED;
			case VK_FORMAT_B8G8R8_UINT: return FORMAT_B8G8R8_UINT;
			case VK_FORMAT_B8G8R8_SINT: return FORMAT_B8G8R8_SINT;
			case VK_FORMAT_B8G8R8_SRGB: return FORMAT_B8G8R8_SRGB;
			case VK_FORMAT_R8G8B8A8_UNORM: return FORMAT_R8G8B8A8_UNORM;
			case VK_FORMAT_R8G8B8A8_SNORM: return FORMAT_R8G8B8A8_SNORM;
			case VK_FORMAT_R8G8B8A8_USCALED: return FORMAT_R8G8B8A8_USCALED;
			case VK_FORMAT_R8G8B8A8_SSCALED: return FORMAT_R8G8B8A8_SSCALED;
			case VK_FORMAT_R8G8B8A8_UINT: return FORMAT_R8G8B8A8_UINT;
			case VK_FORMAT_R8G8B8A8_SINT: return FORMAT_R8G8B8A8_SINT;
			case VK_FORMAT_R8G8B8A8_SRGB: return FORMAT_R8G8B8A8_SRGB;
			case VK_FORMAT_B8G8R8A8_UNORM: return FORMAT_B8G8R8A8_UNORM;
			case VK_FORMAT_B8G8R8A8_SNORM: return FORMAT_B8G8R8A8_SNORM;
			case VK_FORMAT_B8G8R8A8_USCALED: return FORMAT_B8G8R8A8_USCALED;
			case VK_FORMAT_B8G8R8A8_SSCALED: return FORMAT_B8G8R8A8_SSCALED;
			case VK_FORMAT_B8G8R8A8_UINT: return FORMAT_B8G8R8A8_UINT;
			case VK_FORMAT_B8G8R8A8_SINT: return FORMAT_B8G8R8A8_SINT;
			case VK_FORMAT_B8G8R8A8_SRGB: return FORMAT_B8G8R8A8_SRGB;
			case VK_FORMAT_A8B8G8R8_UNORM_PACK32: return FORMAT_A8B8G8R8_UNORM_PACK32;
			case VK_FORMAT_A8B8G8R8_SNORM_PACK32: return FORMAT_A8B8G8R8_SNORM_PACK32;
			case VK_FORMAT_A8B8G8R8_USCALED_PACK32: return FORMAT_A8B8G8R8_USCALED_PACK32;
			case VK_FORMAT_A8B8G8R8_SSCALED_PACK32: return FORMAT_A8B8G8R8_SSCALED_PACK32;
			case VK_FORMAT_A8B8G8R8_UINT_PACK32: return FORMAT_A8B8G8R8_UINT_PACK32;
			case VK_FORMAT_A8B8G8R8_SINT_PACK32: return FORMAT_A8B8G8R8_SINT_PACK32;
			case VK_FORMAT_A8B8G8R8_SRGB_PACK32: return FORMAT_A8B8G8R8_SRGB_PACK32;
			case VK_FORMAT_A2R10G10B10_UNORM_PACK32: return FORMAT_A2R10G10B10_UNORM_PACK32;
			case VK_FORMAT_A2R10G10B10_SNORM_PACK32: return FORMAT_A2R10G10B10_SNORM_PACK32;
			case VK_FORMAT_A2R10G10B10_USCALED_PACK32: return FORMAT_A2R10G10B10_USCALED_PACK32;
			case VK_FORMAT_A2R10G10B10_SSCALED_PACK32: return FORMAT_A2R10G10B10_SSCALED_PACK32;
			case VK_FORMAT_A2R10G10B10_UINT_PACK32: return FORMAT_A2R10G10B10_UINT_PACK32;
			case VK_FORMAT_A2R10G10B10_SINT_PACK32: return FORMAT_A2R10G10B10_SINT_PACK32;
			case VK_FORMAT_A2B10G10R10_UNORM_PACK32: return FORMAT_A2B10G10R10_UNORM_PACK32;
			case VK_FORMAT_A2B10G10R10_SNORM_PACK32: return FORMAT_A2B10G10R10_SNORM_PACK32;
			case VK_FORMAT_A2B10G10R10_USCALED_PACK32: return FORMAT_A2B10G10R10_USCALED_PACK32;
			case VK_FORMAT_A2B10G10R10_SSCALED_PACK32: return FORMAT_A2B10G10R10_SSCALED_PACK32;
			case VK_FORMAT_A2B10G10R10_UINT_PACK32: return FORMAT_A2B10G10R10_UINT_PACK32;
			case VK_FORMAT_A2B10G10R10_SINT_PACK32: return FORMAT_A2B10G10R10_SINT_PACK32;
			case VK_FORMAT_R16_UNORM: return FORMAT_R16_UNORM;
			case VK_FORMAT_R16_SNORM: return FORMAT_R16_SNORM;
			case VK_FORMAT_R16_USCALED: return FORMAT_R16_USCALED;
			case VK_FORMAT_R16_SSCALED: return FORMAT_R16_SSCALED;
			case VK_FORMAT_R16_UINT: return FORMAT_R16_UINT;
			case VK_FORMAT_R16_SINT: return FORMAT_R16_SINT;
			case VK_FORMAT_R16_SFLOAT: return FORMAT_R16_SFLOAT;
			case VK_FORMAT_R16G16_UNORM: return FORMAT_R16G16_UNORM;
			case VK_FORMAT_R16G16_SNORM: return FORMAT_R16G16_SNORM;
			case VK_FORMAT_R16G16_USCALED: return FORMAT_R16G16_USCALED;
			case VK_FORMAT_R16G16_SSCALED: return FORMAT_R16G16_SSCALED;
			case VK_FORMAT_R16G16_UINT: return FORMAT_R16G16_UINT;
			case VK_FORMAT_R16G16_SINT: return FORMAT_R16G16_SINT;
			case VK_FORMAT_R16G16_SFLOAT: return FORMAT_R16G16_SFLOAT;
			case VK_FORMAT_R16G16B16_UNORM: return FORMAT_R16G16B16_UNORM;
			case VK_FORMAT_R16G16B16_SNORM: return FORMAT_R16G16B16_SNORM;
			case VK_FORMAT_R16G16B16_USCALED: return FORMAT_R16G16B16_USCALED;
			case VK_FORMAT_R16G16B16_SSCALED: return FORMAT_R16G16B16_SSCALED;
			case VK_FORMAT_R16G16B16_UINT: return FORMAT_R16G16B16_UINT;
			case VK_FORMAT_R16G16B16_SINT: return FORMAT_R16G16B16_SINT;
			case VK_FORMAT_R16G16B16_SFLOAT: return FORMAT_R16G16B16_SFLOAT;
			case VK_FORMAT_R16G16B16A16_UNORM: return FORMAT_R16G16B16A16_UNORM;
			case VK_FORMAT_R16G16B16A16_SNORM: return FORMAT_R16G16B16A16_SNORM;
			case VK_FORMAT_R16G16B16A16_USCALED: return FORMAT_R16G16B16A16_USCALED;
			case VK_FORMAT_R16G16B16A16_SSCALED: return FORMAT_R16G16B16A16_SSCALED;
			case VK_FORMAT_R16G16B16A16_UINT: return FORMAT_R16G16B16A16_UINT;
			case VK_FORMAT_R16G16B16A16_SINT: return FORMAT_R16G16B16A16_SINT;
			case VK_FORMAT_R16G16B16A16_SFLOAT: return FORMAT_R16G16B16A16_SFLOAT;
			case VK_FORMAT_R32_UINT: return FORMAT_R32_UINT;
			case VK_FORMAT_R32_SINT: return FORMAT_R32_SINT;
			case VK_FORMAT_R32_SFLOAT: return FORMAT_R32_SFLOAT;
			case VK_FORMAT_R32G32_UINT: return FORMAT_R32G32_UINT;
			case VK_FORMAT_R32G32_SINT: return FORMAT_R32G32_SINT;
			case VK_FORMAT_R32G32_SFLOAT: return FORMAT_R32G32_SFLOAT;
			case VK_FORMAT_R32G32B32_UINT: return FORMAT_R32G32B32_UINT;
			case VK_FORMAT_R32G32B32_SINT: return FORMAT_R32G32B32_SINT;
			case VK_FORMAT_R32G32B32_SFLOAT: return FORMAT_R32G32B32_SFLOAT;
			case VK_FORMAT_R32G32B32A32_UINT: return FORMAT_R32G32B32A32_UINT;
			case VK_FORMAT_R32G32B32A32_SINT: return FORMAT_R32G32B32A32_SINT;
			case VK_FORMAT_R32G32B32A32_SFLOAT: return FORMAT_R32G32B32A32_SFLOAT;
			case VK_FORMAT_R64_UINT: return FORMAT_R64_UINT;
			case VK_FORMAT_R64_SINT: return FORMAT_R64_SINT;
			case VK_FORMAT_R64_SFLOAT: return FORMAT_R64_SFLOAT;
			case VK_FORMAT_R64G64_UINT: return FORMAT_R64G64_UINT;
			case VK_FORMAT_R64G64_SINT: return FORMAT_R64G64_SINT;
			case VK_FORMAT_R64G64_SFLOAT: return FORMAT_R64G64_SFLOAT;
			case VK_FORMAT_R64G64B64_UINT: return FORMAT_R64G64B64_UINT;
			case VK_FORMAT_R64G64B64_SINT: return FORMAT_R64G64B64_SINT;
			case VK_FORMAT_R64G64B64_SFLOAT: return FORMAT_R64G64B64_SFLOAT;
			case VK_FORMAT_R64G64B64A64_UINT: return FORMAT_R64G64B64A64_UINT;
			case VK_FORMAT_R64G64B64A64_SINT: return FORMAT_R64G64B64A64_SINT;
			case VK_FORMAT_R64G64B64A64_SFLOAT: return FORMAT_R64G64B64A64_SFLOAT;
			case VK_FORMAT_B10G11R11_UFLOAT_PACK32: return FORMAT_B10G11R11_UFLOAT_PACK32;
			case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: return FORMAT_E5B9G9R9_UFLOAT_PACK32;
			case VK_FORMAT_D16_UNORM: return FORMAT_D16_UNORM;
			case VK_FORMAT_X8_D24_UNORM_PACK32: return FORMAT_X8_D24_UNORM_PACK32;
			case VK_FORMAT_D32_SFLOAT: return FORMAT_D32_SFLOAT;
			case VK_FORMAT_S8_UINT: return FORMAT_S8_UINT;
			case VK_FORMAT_D16_UNORM_S8_UINT: return FORMAT_D16_UNORM_S8_UINT;
			case VK_FORMAT_D24_UNORM_S8_UINT: return FORMAT_D24_UNORM_S8_UINT;
			case VK_FORMAT_D32_SFLOAT_S8_UINT: return FORMAT_D32_SFLOAT_S8_UINT;
			case VK_FORMAT_BC1_RGB_UNORM_BLOCK: return FORMAT_BC1_RGB_UNORM_BLOCK;
			case VK_FORMAT_BC1_RGB_SRGB_BLOCK: return FORMAT_BC1_RGB_SRGB_BLOCK;
			case VK_FORMAT_BC1_RGBA_UNORM_BLOCK: return FORMAT_BC1_RGBA_UNORM_BLOCK;
			case VK_FORMAT_BC1_RGBA_SRGB_BLOCK: return FORMAT_BC1_RGBA_SRGB_BLOCK;
			case VK_FORMAT_BC2_UNORM_BLOCK: return FORMAT_BC2_UNORM_BLOCK;
			case VK_FORMAT_BC2_SRGB_BLOCK: return FORMAT_BC2_SRGB_BLOCK;
			case VK_FORMAT_BC3_UNORM_BLOCK: return FORMAT_BC3_UNORM_BLOCK;
			case VK_FORMAT_BC3_SRGB_BLOCK: return FORMAT_BC3_SRGB_BLOCK;
			case VK_FORMAT_BC4_UNORM_BLOCK: return FORMAT_BC4_UNORM_BLOCK;
			case VK_FORMAT_BC4_SNORM_BLOCK: return FORMAT_BC4_SNORM_BLOCK;
			case VK_FORMAT_BC5_UNORM_BLOCK: return FORMAT_BC5_UNORM_BLOCK;
			case VK_FORMAT_BC5_SNORM_BLOCK: return FORMAT_BC5_SNORM_BLOCK;
			case VK_FORMAT_BC6H_UFLOAT_BLOCK: return FORMAT_BC6H_UFLOAT_BLOCK;
			case VK_FORMAT_BC6H_SFLOAT_BLOCK: return FORMAT_BC6H_SFLOAT_BLOCK;
			case VK_FORMAT_BC7_UNORM_BLOCK: return FORMAT_BC7_UNORM_BLOCK;
			case VK_FORMAT_BC7_SRGB_BLOCK: return FORMAT_BC7_SRGB_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: return FORMAT_ETC2_R8G8B8_UNORM_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: return FORMAT_ETC2_R8G8B8_SRGB_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: return FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: return FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: return FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: return FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK;
			case VK_FORMAT_EAC_R11_UNORM_BLOCK: return FORMAT_EAC_R11_UNORM_BLOCK;
			case VK_FORMAT_EAC_R11_SNORM_BLOCK: return FORMAT_EAC_R11_SNORM_BLOCK;
			case VK_FORMAT_EAC_R11G11_UNORM_BLOCK: return FORMAT_EAC_R11G11_UNORM_BLOCK;
			case VK_FORMAT_EAC_R11G11_SNORM_BLOCK: return FORMAT_EAC_R11G11_SNORM_BLOCK;
			case VK_FORMAT_ASTC_4x4_UNORM_BLOCK: return FORMAT_ASTC_4x4_UNORM_BLOCK;
			case VK_FORMAT_ASTC_4x4_SRGB_BLOCK: return FORMAT_ASTC_4x4_SRGB_BLOCK;
			case VK_FORMAT_ASTC_5x4_UNORM_BLOCK: return FORMAT_ASTC_5x4_UNORM_BLOCK;
			case VK_FORMAT_ASTC_5x4_SRGB_BLOCK: return FORMAT_ASTC_5x4_SRGB_BLOCK;
			case VK_FORMAT_ASTC_5x5_UNORM_BLOCK: return FORMAT_ASTC_5x5_UNORM_BLOCK;
			case VK_FORMAT_ASTC_5x5_SRGB_BLOCK: return FORMAT_ASTC_5x5_SRGB_BLOCK;
			case VK_FORMAT_ASTC_6x5_UNORM_BLOCK: return FORMAT_ASTC_6x5_UNORM_BLOCK;
			case VK_FORMAT_ASTC_6x5_SRGB_BLOCK: return FORMAT_ASTC_6x5_SRGB_BLOCK;
			case VK_FORMAT_ASTC_6x6_UNORM_BLOCK: return FORMAT_ASTC_6x6_UNORM_BLOCK;
			case VK_FORMAT_ASTC_6x6_SRGB_BLOCK: return FORMAT_ASTC_6x6_SRGB_BLOCK;
			case VK_FORMAT_ASTC_8x5_UNORM_BLOCK: return FORMAT_ASTC_8x5_UNORM_BLOCK;
			case VK_FORMAT_ASTC_8x5_SRGB_BLOCK: return FORMAT_ASTC_8x5_SRGB_BLOCK;
			case VK_FORMAT_ASTC_8x6_UNORM_BLOCK: return FORMAT_ASTC_8x6_UNORM_BLOCK;
			case VK_FORMAT_ASTC_8x6_SRGB_BLOCK: return FORMAT_ASTC_8x6_SRGB_BLOCK;
			case VK_FORMAT_ASTC_8x8_UNORM_BLOCK: return FORMAT_ASTC_8x8_UNORM_BLOCK;
			case VK_FORMAT_ASTC_8x8_SRGB_BLOCK: return FORMAT_ASTC_8x8_SRGB_BLOCK;
			case VK_FORMAT_ASTC_10x5_UNORM_BLOCK: return FORMAT_ASTC_10x5_UNORM_BLOCK;
			case VK_FORMAT_ASTC_10x5_SRGB_BLOCK: return FORMAT_ASTC_10x5_SRGB_BLOCK;
			case VK_FORMAT_ASTC_10x6_UNORM_BLOCK: return FORMAT_ASTC_10x6_UNORM_BLOCK;
			case VK_FORMAT_ASTC_10x6_SRGB_BLOCK: return FORMAT_ASTC_10x6_SRGB_BLOCK;
			case VK_FORMAT_ASTC_10x8_UNORM_BLOCK: return FORMAT_ASTC_10x8_UNORM_BLOCK;
			case VK_FORMAT_ASTC_10x8_SRGB_BLOCK: return FORMAT_ASTC_10x8_SRGB_BLOCK;
			case VK_FORMAT_ASTC_10x10_UNORM_BLOCK: return FORMAT_ASTC_10x10_UNORM_BLOCK;
			case VK_FORMAT_ASTC_10x10_SRGB_BLOCK: return FORMAT_ASTC_10x10_SRGB_BLOCK;
			case VK_FORMAT_ASTC_12x10_UNORM_BLOCK: return FORMAT_ASTC_12x10_UNORM_BLOCK;
			case VK_FORMAT_ASTC_12x10_SRGB_BLOCK: return FORMAT_ASTC_12x10_SRGB_BLOCK;
			case VK_FORMAT_ASTC_12x12_UNORM_BLOCK: return FORMAT_ASTC_12x12_UNORM_BLOCK;
			case VK_FORMAT_ASTC_12x12_SRGB_BLOCK: return FORMAT_ASTC_12x12_SRGB_BLOCK;
			case VK_FORMAT_G8B8G8R8_422_UNORM: return FORMAT_G8B8G8R8_422_UNORM;
			case VK_FORMAT_B8G8R8G8_422_UNORM: return FORMAT_B8G8R8G8_422_UNORM;
			case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: return FORMAT_G8_B8_R8_3PLANE_420_UNORM;
			case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: return FORMAT_G8_B8R8_2PLANE_420_UNORM;
			case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: return FORMAT_G8_B8_R8_3PLANE_422_UNORM;
			case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: return FORMAT_G8_B8R8_2PLANE_422_UNORM;
			case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: return FORMAT_G8_B8_R8_3PLANE_444_UNORM;
			case VK_FORMAT_R10X6_UNORM_PACK16: return FORMAT_R10X6_UNORM_PACK16;
			case VK_FORMAT_R10X6G10X6_UNORM_2PACK16: return FORMAT_R10X6G10X6_UNORM_2PACK16;
			case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: return FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
			case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: return FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
			case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: return FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: return FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
			case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: return FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: return FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
			case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: return FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: return FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
			case VK_FORMAT_R12X4_UNORM_PACK16: return FORMAT_R12X4_UNORM_PACK16;
			case VK_FORMAT_R12X4G12X4_UNORM_2PACK16: return FORMAT_R12X4G12X4_UNORM_2PACK16;
			case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: return FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
			case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: return FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
			case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: return FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: return FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
			case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: return FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: return FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
			case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: return FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: return FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
			case VK_FORMAT_G16B16G16R16_422_UNORM: return FORMAT_G16B16G16R16_422_UNORM;
			case VK_FORMAT_B16G16R16G16_422_UNORM: return FORMAT_B16G16R16G16_422_UNORM;
			case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: return FORMAT_G16_B16_R16_3PLANE_420_UNORM;
			case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: return FORMAT_G16_B16R16_2PLANE_420_UNORM;
			case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: return FORMAT_G16_B16_R16_3PLANE_422_UNORM;
			case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: return FORMAT_G16_B16R16_2PLANE_422_UNORM;
			case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: return FORMAT_G16_B16_R16_3PLANE_444_UNORM;
			case VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: return FORMAT_G8_B8R8_2PLANE_444_UNORM;
			case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: return FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16;
			case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: return FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16;
			case VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: return FORMAT_G16_B16R16_2PLANE_444_UNORM;
			case VK_FORMAT_A4R4G4B4_UNORM_PACK16: return FORMAT_A4R4G4B4_UNORM_PACK16;
			case VK_FORMAT_A4B4G4R4_UNORM_PACK16: return FORMAT_A4B4G4R4_UNORM_PACK16;
			case VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: return FORMAT_ASTC_4x4_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: return FORMAT_ASTC_5x4_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: return FORMAT_ASTC_5x5_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: return FORMAT_ASTC_6x5_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: return FORMAT_ASTC_6x6_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: return FORMAT_ASTC_8x5_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: return FORMAT_ASTC_8x6_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: return FORMAT_ASTC_8x8_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: return FORMAT_ASTC_10x5_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: return FORMAT_ASTC_10x6_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: return FORMAT_ASTC_10x8_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: return FORMAT_ASTC_10x10_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: return FORMAT_ASTC_12x10_SFLOAT_BLOCK;
			case VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: return FORMAT_ASTC_12x12_SFLOAT_BLOCK;
			case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: return FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG;
			case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: return FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG;
			case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: return FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG;
			case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: return FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG;
			case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: return FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG;
			case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: return FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG;
			case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: return FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG;
			case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: return FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG;
			}
			Logf(LogLevel::Error, "Invalid format type: %d\n", format);
			check(false && "Invalid format type.");
			return FORMAT_UNDEFINED;
		}

		EImageUsage GetImageUsage(VkImageUsageFlags usage)
		{
#if 0
			EImageUsage flags = 0;
			if (usage & VK_IMAGE_USAGE_TRANSFER_SRC_BIT) flags |= IMAGE_USAGE_TRANSFER_SRC_BIT;
			if (usage & VK_IMAGE_USAGE_TRANSFER_DST_BIT) flags |= IMAGE_USAGE_TRANSFER_DST_BIT;
			if (usage & VK_IMAGE_USAGE_SAMPLED_BIT) flags |= IMAGE_USAGE_SAMPLED_BIT;
			if (usage & VK_IMAGE_USAGE_STORAGE_BIT) flags |= IMAGE_USAGE_STORAGE_BIT;
			if (usage & VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT) flags |= IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
			if (usage & VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT) flags |= IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;
			if (usage & VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT) flags |= IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT;
			if (usage & VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT) flags |= IMAGE_USAGE_INPUT_ATTACHMENT_BIT;
			if (usage & VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT) flags |= IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT;
			if (usage & VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) flags |= IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
			if (usage & VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI) flags |= IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI;
			return flags;
#else
			return usage;
#endif // 0

		}

		EImageAspect GetImageAspect(VkImageAspectFlags aspect)
		{
#if 0
			EImageAspect flags = 0;
			if (aspect & VK_IMAGE_ASPECT_COLOR_BIT) flags |= IMAGE_ASPECT_COLOR_BIT;
			if (aspect & VK_IMAGE_ASPECT_DEPTH_BIT) flags |= IMAGE_ASPECT_DEPTH_BIT;
			if (aspect & VK_IMAGE_ASPECT_STENCIL_BIT) flags |= IMAGE_ASPECT_STENCIL_BIT;
			if (aspect & VK_IMAGE_ASPECT_METADATA_BIT) flags |= IMAGE_ASPECT_METADATA_BIT;
			if (aspect & VK_IMAGE_ASPECT_PLANE_0_BIT) flags |= IMAGE_ASPECT_PLANE_0_BIT;
			if (aspect & VK_IMAGE_ASPECT_PLANE_1_BIT) flags |= IMAGE_ASPECT_PLANE_1_BIT;
			if (aspect & VK_IMAGE_ASPECT_PLANE_2_BIT) flags |= IMAGE_ASPECT_PLANE_2_BIT;
			if (aspect & VK_IMAGE_ASPECT_NONE) flags |= IMAGE_ASPECT_NONE;
			if (aspect & VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT) flags |= IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT;
			if (aspect & VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT) flags |= IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT;
			if (aspect & VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT) flags |= IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT;
			if (aspect & VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT) flags |= IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT;
			return flags;
#else
			return aspect;
#endif // 0
		}

		EFilterType GetFilter(VkFilter type)
		{
			switch (type)
			{
			case VK_FILTER_NEAREST: return FILTER_NEAREST;
			case VK_FILTER_LINEAR: return FILTER_LINEAR;
			case VK_FILTER_CUBIC_IMG: return FILTER_CUBIC;
			}
			return FILTER_MAX_ENUM;
		}

		ESamplerAddressMode GetSamplerAddressMode(VkSamplerAddressMode mode)
		{
			switch (mode)
			{
			case VK_SAMPLER_ADDRESS_MODE_REPEAT: return SAMPLER_ADDRESS_MODE_REPEAT;
			case VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:return SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT;
			case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: return SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
			case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: return SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER;
			case VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: return SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
			}
			return SAMPLER_ADDRESS_MODE_MAX_ENUM;
		}

		ESampleCount GetSampleCount(VkSampleCountFlags sample)
		{
			switch (sample)
			{
				case VK_SAMPLE_COUNT_1_BIT: return SAMPLE_COUNT_1_BIT;
				case VK_SAMPLE_COUNT_2_BIT: return SAMPLE_COUNT_2_BIT;
				case VK_SAMPLE_COUNT_4_BIT: return SAMPLE_COUNT_4_BIT;
				case VK_SAMPLE_COUNT_8_BIT: return SAMPLE_COUNT_8_BIT;
				case VK_SAMPLE_COUNT_16_BIT: return SAMPLE_COUNT_16_BIT;
				case VK_SAMPLE_COUNT_32_BIT: return SAMPLE_COUNT_32_BIT;
				case VK_SAMPLE_COUNT_64_BIT: return SAMPLE_COUNT_64_BIT;
				case VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: return SAMPLE_COUNT_MAX;
			}
			return SAMPLE_COUNT_MAX;
		}
	}

	void utils::CmdSubmitTransfer(const RenderContext& renderContext, std::function<void(VkCommandBuffer)>&& fillCmdCallback)
	{
		// Begin command buffer recording.
		VkCommandBufferBeginInfo beginInfo = vkinit::CommandBufferBeginInfo(VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT);
		vkcheck(vkBeginCommandBuffer(renderContext.TransferContext.CommandBuffer, &beginInfo));
		// Call to extern code to record commands.
		fillCmdCallback(renderContext.TransferContext.CommandBuffer);
		// Finish recording.
		vkcheck(vkEndCommandBuffer(renderContext.TransferContext.CommandBuffer));

		VkSubmitInfo info = vkinit::SubmitInfo(&renderContext.TransferContext.CommandBuffer);
		vkcheck(vkQueueSubmit(renderContext.GraphicsQueue, 1, &info, renderContext.TransferContext.Fence));
		vkcheck(vkWaitForFences(renderContext.Device, 1, &renderContext.TransferContext.Fence, false, 1000000000));
		vkcheck(vkResetFences(renderContext.Device, 1, &renderContext.TransferContext.Fence));
		vkResetCommandPool(renderContext.Device, renderContext.TransferContext.CommandPool, 0);
	}
	const char* VkResultToStr(VkResult res)
	{
		switch (res)
		{
#define _X_(x) case x: return #x;
			VK_RESULT_LIST
#undef _X_
		}
		check(false && "Unreachable code");
		return nullptr;
	}

}

