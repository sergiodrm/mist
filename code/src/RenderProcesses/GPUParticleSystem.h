// Autogenerated code for Mist project
// Header file

#pragma once
#include "Shader.h"
#include "Globals.h"
#include "VulkanBuffer.h"
#include "RenderAPI.h"
#include "RenderTarget.h"
#include <glm/glm.hpp>

namespace Mist
{
	class ComputeShader;
	struct RenderFrameContext;

	struct Particle
	{
		glm::vec2 Position;
		glm::vec2 Velocity;
		glm::vec4 Color;
	};

	class GPUParticleSystem
	{
	public:

		void Init(const RenderContext& context, RenderTarget* rt);
		void InitFrameData(const RenderContext& context, RenderFrameContext* frameContextArray);
		void Dispatch(CommandBuffer cmd, uint32_t frameIndex);
		void Draw(CommandBuffer cmd, const RenderFrameContext& frameContext);
		void Destroy(const RenderContext& context);

	private:
		ComputeShader* m_computeShader;
		AllocatedBuffer m_ssboArray[globals::MaxOverlappedFrames];
		VkDescriptorSet m_ssboDescriptorArray[globals::MaxOverlappedFrames];

		ShaderProgram* m_graphicsShader;
		RenderTarget m_renderTarget;
		Sampler m_sampler;
	};
}
