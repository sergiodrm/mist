// Autogenerated code for Mist project
// Header file

#pragma once
#include "RenderTarget.h"
#include "DebugProcess.h"

namespace Mist
{
	class ImGuiInstance
	{
	public:
		void Init(const RenderContext& context, VkRenderPass renderPass);
		void Draw(const RenderContext& context, VkCommandBuffer cmd);
		void Destroy(const RenderContext& context);
		void BeginFrame(const RenderContext& context);
	private:
		VkDescriptorPool m_imguiPool;
	};

	class UIProcess : public RenderProcess
	{
	public:
		virtual RenderProcessType GetProcessType() const override { return RENDERPROCESS_UI; }
		virtual void Init(const RenderContext& context) override;
		virtual void InitFrameData(const RenderContext& context, const Renderer& renderer, uint32_t frameIndex, UniformBufferMemoryPool& buffer) override;
		virtual void UpdateRenderData(const RenderContext& context, RenderFrameContext& frameContext) override;
		virtual void Draw(const RenderContext& context, const RenderFrameContext& frameContext) override;
		virtual void Destroy(const RenderContext& context) override;
		virtual void ImGuiDraw() override {}
		virtual const RenderTarget* GetRenderTarget(uint32_t index) const override { return &m_renderTarget; }
	private:
		ImGuiInstance m_imgui;
		DebugPipeline m_debugPipeline;
		RenderTarget m_renderTarget;
	};
}
