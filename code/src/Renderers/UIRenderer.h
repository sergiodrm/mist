// Autogenerated code for Mist project
// Header file

#pragma once
#include "RendererBase.h"
#include "RenderTarget.h"
#include "DebugRenderer.h"

namespace Mist
{
	class ImGuiInstance
	{
	public:
		void Init(const RenderContext& context, VkRenderPass renderPass);
		void Draw(const RenderContext& context, VkCommandBuffer cmd);
		void Destroy(const RenderContext& context);
		void BeginFrame(const RenderContext& context);
	private:
		VkDescriptorPool m_imguiPool;
	};

	class UIRenderer : public IRendererBase
	{
	public:

		struct FrameData
		{
			RenderTarget RT;
		};

		virtual void Init(const RendererCreateInfo& info) override;
		virtual void Destroy(const RenderContext& renderContext) override;
		virtual void PrepareFrame(const RenderContext& renderContext, RenderFrameContext& renderFrameContext) override;
		virtual void RecordCmd(const RenderContext& renderContext, const RenderFrameContext& renderFrameContext, uint32_t attachmentIndex) override;
		virtual void ImGuiDraw() override {}
		virtual VkImageView GetRenderTarget(uint32_t currentFrameIndex, uint32_t attachmentIndex) const override;
		virtual VkImageView GetDepthBuffer(uint32_t currentFrameIndex, uint32_t attachmentIndex) const override;
	private:
		ImGuiInstance m_imgui;
		tArray<FrameData, globals::MaxOverlappedFrames> m_frameData;
		DebugPipeline m_debugPipeline;
	};
}
