// Autogenerated code for vkmmc project
// Header file

#pragma once
#include "RendererBase.h"
#include <glm/glm.hpp>

namespace vkmmc
{
	namespace rdbg
	{
		void DeferredDrawLine(const glm::vec3& init, const glm::vec3& end, const glm::vec3& color);
		void DeferredDrawAxis(const glm::vec3& pos, const glm::vec3& rot, const glm::vec3& scl);
		void DeferredDrawAxis(const glm::mat4& transform);
		void DeferredDrawSphere(const glm::vec3& pos, float radius, const glm::vec3& color, uint32_t vertices = 16);
	}

	class DebugRenderer : public IRendererBase
	{
	public:
		virtual void Init(const RendererCreateInfo& info) override;
		virtual void Destroy(const RenderContext& renderContext) override;
		virtual void BeginFrame(const RenderContext& renderContext) override {}
		virtual void RecordCommandBuffer(const RenderContext& renderContext, RenderFrameContext& renderFrameContext) override;
	protected:
		// Render State
		RenderPipeline m_renderPipeline;
		VertexBuffer m_lineVertexBuffer;
	};

}
