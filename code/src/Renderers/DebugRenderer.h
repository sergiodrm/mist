// Autogenerated code for vkmmc project
// Header file

#pragma once
#include "RendererBase.h"
#include <glm/glm.hpp>

namespace vkmmc
{
	namespace rdbg
	{
		void DeferredDrawLine(const glm::vec3& init, const glm::vec3& end, const glm::vec3& color);
		void DeferredDrawAxis(const glm::vec3& pos, const glm::vec3& rot, const glm::vec3& scl);
		void DeferredDrawAxis(const glm::mat4& transform);
		void DeferredDrawSphere(const glm::vec3& pos, float radius, const glm::vec3& color, uint32_t vertices = 16);
	}

	class DebugRenderer : public IRendererBase
	{
		struct FrameData
		{
			VkDescriptorSet SetUBO;
		};

		struct QuadVertex
		{
			glm::vec3 Position;
			glm::vec2 UVs;
		};
	public:
		virtual void Init(const RendererCreateInfo& info) override;
		virtual void Destroy(const RenderContext& renderContext) override;
		virtual void PrepareFrame(const RenderContext& renderContext, RenderFrameContext& renderFrameContext) override;
		virtual void RecordDepthPass(const RenderContext& renderContext, const RenderFrameContext& renderFrameContext) override {}
		virtual void RecordColorPass(const RenderContext& renderContext, const RenderFrameContext& renderFrameContext) override;
		virtual void ImGuiDraw() override;
	protected:
		// Render State
		RenderPipeline m_renderPipeline;
		VertexBuffer m_lineVertexBuffer;

		std::vector<FrameData> m_frameData;
		VertexBuffer m_quadVertexBuffer;
		IndexBuffer m_quadIndexBuffer;
		RenderPipeline m_quadPipeline;
		VkSampler m_depthSampler;
		bool m_debugDepthMap = true;
	};

}
