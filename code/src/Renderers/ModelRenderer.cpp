// Autogenerated code for vkmmc project
// Source file
#include "ModelRenderer.h"
#include "Debug.h"
#include "InitVulkanTypes.h"
#include "Shader.h"
#include "Globals.h"
#include "VulkanRenderEngine.h"
#include "SceneImpl.h"
#include "imgui_internal.h"

#include "DebugRenderer.h"
#include "GenericUtils.h"

namespace vkmmc
{
	ModelRenderer::ModelRenderer() : IRendererBase(), m_activeLightsCount(0), m_activeSpotLightsCount(0)
	{
		for (uint32_t i = 0; i < EnvironmentData::MaxLights; ++i)
		{
			m_environmentData.Lights[i] = { .Position = {0.f, 0.f, 0.f}, .Radius = 10.f, .Color = {1.f, 1.f, 1.f}, .Compression = 0.5f, };
			m_environmentData.SpotLights[i] = { .Color = {1.f, 1.f, 1.f}, .Direction = {1.f, 0.f, 0.f}, .InnerCutoff = 0.5f, .Position = {0.f, 0.f, 0.f}, .OuterCutoff = 0.5f };
		}
		m_environmentData.DirectionalLight = { .Direction = {0.f, -1.f, 0.f}, .Radius = 0.f, .Color = {0.01f, 0.01f, 0.05f}, .Compression = 0.f };
	}

	void ModelRenderer::Init(const RendererCreateInfo& info)
	{
		/**********************************/
		/** Pipeline layout and pipeline **/
		/**********************************/
		ShaderDescription shaderStageDescs[] =
		{
			{.Filepath = globals::BasicVertexShader, .Stage = VK_SHADER_STAGE_VERTEX_BIT},
			{.Filepath = globals::BasicFragmentShader, .Stage = VK_SHADER_STAGE_FRAGMENT_BIT}
		};

		// This pipeline use dynamic descriptors, we have to initialize descriptor set layout manually.
		VkDescriptorSetLayout layouts[3];
		uint32_t layoutCount = sizeof(layouts) / sizeof(VkDescriptorSetLayout);
		DescriptorSetLayoutBuilder::Create(*info.LayoutCache)
			.AddBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_VERTEX_BIT, 1)
			.AddBinding(1, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_FRAGMENT_BIT, 1)
			.Build(info.RContext, &layouts[0]);
		DescriptorSetLayoutBuilder::Create(*info.LayoutCache)
			.AddBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_SHADER_STAGE_VERTEX_BIT, 1)
			.Build(info.RContext, &layouts[1]);
		layouts[2] = MaterialRenderData::GetDescriptorSetLayout(info.RContext, *info.LayoutCache);

		m_renderPipeline = RenderPipeline::Create(
			info.RContext,
			info.RenderPass,
			0, // subpass
			shaderStageDescs,
			sizeof(shaderStageDescs) / sizeof(ShaderDescription),
			layouts, layoutCount, nullptr, 0,
			VertexInputLayout::GetStaticMeshVertexLayout()
		);

		m_frameData.resize(info.FrameUniformBufferArray.size());
		for (uint32_t i = 0; i < (uint32_t)info.FrameUniformBufferArray.size(); ++i)
		{
			UniformBuffer* uniformBuffer = info.FrameUniformBufferArray[i];

			// Allocate shader data
			uint32_t modelsSize = sizeof(glm::mat4) * VulkanRenderEngine::MaxRenderObjects;
			uint32_t modelsOffset = uniformBuffer->AllocUniform(info.RContext, "Models", modelsSize);
			uint32_t enviroSize = sizeof(EnvironmentData);
			uint32_t enviroOffset = uniformBuffer->AllocUniform(info.RContext, "Environment", enviroSize);

			// Configure per frame DescriptorSet.
			VkDescriptorBufferInfo cameraDescInfo = uniformBuffer->GenerateDescriptorBufferInfo("Camera");
			VkDescriptorBufferInfo enviroDescInfo = uniformBuffer->GenerateDescriptorBufferInfo("Environment");
			VkDescriptorBufferInfo modelsDescInfo = uniformBuffer->GenerateDescriptorBufferDynamicInfo("Models", sizeof(glm::mat4));
			// Materials have its own descriptor set (right now).


			DescriptorBuilder::Create(*info.LayoutCache, *info.DescriptorAllocator)
				.BindBuffer(0, cameraDescInfo, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_VERTEX_BIT)
				.BindBuffer(1, enviroDescInfo, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_FRAGMENT_BIT)
				.Build(info.RContext, m_frameData[i].PerFrameSet);
			DescriptorBuilder::Create(*info.LayoutCache, *info.DescriptorAllocator)
				.BindBuffer(0, modelsDescInfo, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_SHADER_STAGE_VERTEX_BIT)
				.Build(info.RContext, m_frameData[i].ModelSet);
		}

		m_environmentData.AmbientColor = glm::vec4(0.01f, 0.01f, 0.01f, 1.f);
	}

	void ModelRenderer::Destroy(const RenderContext& renderContext)
	{
		m_renderPipeline.Destroy(renderContext);
	}

	void ModelRenderer::RecordCommandBuffer(const RenderContext& renderContext, RenderFrameContext& renderFrameContext)
	{
		PROFILE_SCOPE(ModelPass);
		{
			PROFILE_SCOPE(UpdateBuffers);
			// Update buffers
			// TODO: Get camera position from scene view.
			m_environmentData.ViewPosition = glm::inverse(renderFrameContext.CameraData->View)[3];
			m_environmentData.ActiveLightsCount = (float)m_activeLightsCount;
			m_environmentData.ActiveSpotLightsCount = (float)m_activeSpotLightsCount;
			renderFrameContext.GlobalBuffer.SetUniform(renderContext, "Models", renderFrameContext.Scene->GetRawGlobalTransforms(), sizeof(glm::mat4) * renderFrameContext.Scene->Count());
			renderFrameContext.GlobalBuffer.SetUniform(renderContext, "Environment", &m_environmentData, sizeof(EnvironmentData));
		}

		// Bind pipeline
		VkCommandBuffer cmd = renderFrameContext.GraphicsCommand;
		vkCmdBindPipeline(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS, m_renderPipeline.GetPipelineHandle());

		// Bind global descriptor sets
		VkDescriptorSet sets[] = { m_frameData[renderFrameContext.FrameIndex].PerFrameSet };
		uint32_t setCount = sizeof(sets) / sizeof(VkDescriptorSet);
		vkCmdBindDescriptorSets(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS, m_renderPipeline.GetPipelineLayoutHandle(), 0, setCount, sets, 0, nullptr);
		++GRenderStats.SetBindingCount;


		// Iterate scene graph to render models.
		uint32_t lastMaterialIndex = UINT32_MAX;
		const Mesh* lastMesh = nullptr;
		Scene* scene = renderFrameContext.Scene;
		uint32_t nodeCount = scene->GetRenderObjectCount();
		for (uint32_t i = 0; i < nodeCount; ++i)
		{
			RenderObject renderObject = i;
			const Mesh* mesh = scene->GetMesh(renderObject);
			if (mesh)
			{
				const MeshRenderData& mrd = scene->GetMeshRenderData(mesh->GetHandle());

				// BaseOffset in buffer is already setted when descriptor was created.
				uint32_t modelDynamicOffset = i * sizeof(glm::mat4);
				VkDescriptorSet modelSet = m_frameData[renderFrameContext.FrameIndex].ModelSet;
				vkCmdBindDescriptorSets(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS,
					m_renderPipeline.GetPipelineLayoutHandle(), 1, 1, &modelSet, 1, &modelDynamicOffset);
				++GRenderStats.SetBindingCount;

				if (lastMesh != mesh)
				{
					check(mesh->GetHandle().IsValid());
					lastMesh = mesh;
					mrd.VertexBuffer.Bind(cmd);
					mrd.IndexBuffer.Bind(cmd);
				}

				for (uint32_t j = 0; j < (uint32_t)mrd.PrimitiveArray.size(); ++j)
				{
					const PrimitiveMeshData& drawData = mrd.PrimitiveArray[j];
					// TODO: material by default if there is no material.
					if (lastMaterialIndex != drawData.MaterialIndex)
					{
						lastMaterialIndex = drawData.MaterialIndex;
						const Material* material = &scene->GetMaterialArray()[drawData.MaterialIndex];
						check(material && material->GetHandle().IsValid());
						const MaterialRenderData& mtl = scene->GetMaterialRenderData(material->GetHandle());
						vkCmdBindDescriptorSets(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS,
							m_renderPipeline.GetPipelineLayoutHandle(), 2, 1, &mtl.Set, 0, nullptr);
						++GRenderStats.SetBindingCount;
					}
					vkCmdDrawIndexed(cmd, drawData.Count, 1, drawData.FirstIndex, 0, 0);
					++GRenderStats.DrawCalls;
					GRenderStats.TrianglesCount += drawData.Count / 3;
				}
			}
		}
	}

	void ModelRenderer::ImGuiDraw()
	{
		ImGui::Begin("Environment");
		auto utilDragFloat = [](const char* label, uint32_t id, float* data, uint32_t count, bool asColor, float diff = 1.f, float minLimit = 0.f, float maxLimit = 0.f)
			{
				ImGui::Columns(2);
				ImGui::Text(label);
				ImGui::NextColumn();
				char buff[64];
				sprintf_s(buff, "##%s%u", label, id);
				bool r = false;
				switch (count)
				{
				case 1: r = ImGui::DragFloat(buff, data, diff, minLimit, maxLimit); break;
				case 2: r = ImGui::DragFloat2(buff, data, diff, minLimit, maxLimit); break;
				case 3: r = asColor ? ImGui::ColorEdit3(buff, data) : ImGui::DragFloat3(buff, data, diff, minLimit, maxLimit); break;
				case 4: r = asColor ? ImGui::ColorEdit4(buff, data) : ImGui::DragFloat4(buff, data, diff, minLimit, maxLimit); break;
				}
				ImGui::NextColumn();
				ImGui::Columns();
				return r;
			};
		utilDragFloat("Ambient color", 0, &m_environmentData.AmbientColor[0], 3, true);

		if (ImGui::CollapsingHeader("Directional light"))
		{
			utilDragFloat("Direction", EnvironmentData::MaxLights, &m_environmentData.DirectionalLight.Direction[0], 3, false, 0.02f, -1.f, 1.f);
			utilDragFloat("Color", EnvironmentData::MaxLights, &m_environmentData.DirectionalLight.Color[0], 3, true);
			rdbg::DeferredDrawLine(glm::vec3(0.f), m_environmentData.DirectionalLight.Direction, glm::vec3(1.f));
		}
		if (ImGui::CollapsingHeader("Point lights"))
		{
			ImGui::SliderInt("Active point lights", &m_activeLightsCount, 0, (int32_t)EnvironmentData::MaxLights, "%d");
			for (uint32_t i = 0; i < (uint32_t)m_activeLightsCount; ++i)
			{
				char buff[32];
				sprintf_s(buff, "PointLight_%u", i);
				if (ImGui::CollapsingHeader(buff))
				{
					utilDragFloat("Position", i, &m_environmentData.Lights[i].Position[0], 3, false);
					utilDragFloat("Color", i, &m_environmentData.Lights[i].Color[0], 3, true);
					utilDragFloat("Radius", i, &m_environmentData.Lights[i].Radius, 1, false, 0.5f, 0.f, FLT_MAX);
					utilDragFloat("Compression", i, &m_environmentData.Lights[i].Compression, 1, false, 0.5f, 0.5f, FLT_MAX);

					rdbg::DeferredDrawAxis(m_environmentData.Lights[i].Position, glm::vec3(0.f), glm::vec3(1.f));
					rdbg::DeferredDrawSphere(m_environmentData.Lights[i].Position, m_environmentData.Lights[i].Radius, m_environmentData.Lights[i].Color);
				}
			}
		}
		if (ImGui::CollapsingHeader("Spot lights"))
		{
			ImGui::SliderInt("Active spot lights", &m_activeSpotLightsCount, 0, (int32_t)EnvironmentData::MaxLights, "%d");
			for (uint32_t i = 0; i < (uint32_t)m_activeSpotLightsCount; ++i)
			{
				char buff[32];
				sprintf_s(buff, "SpotLight_%u", i);
				if (ImGui::CollapsingHeader(buff))
				{
					SpotLightData& data = m_environmentData.SpotLights[i];
					utilDragFloat("Position", i, &data.Position[0], 3, false);
					glm::vec3 dir = glm::normalize(data.Direction);
					glm::vec3 pyr;
					pyr.x = asin(-dir.y);
					pyr.y = atan2(dir.x, dir.z);
					if (utilDragFloat("Direction", i, &pyr[0], 3, false, 0.02f, -(float)M_PI, (float)M_PI))
					{
						glm::mat4 m = vkmmc_utils::PitchYawRollToMat4(pyr);
						data.Direction = glm::vec3(m * glm::vec4(0.f, 0.f, 1.f, 1.f));
					}
					utilDragFloat("Color", i, &data.Color[0], 3, true);
					utilDragFloat("InnerCutoff", i, &data.InnerCutoff, 1, false, 0.01f, 0.f, FLT_MAX);
					utilDragFloat("OuterCutoff", i, &data.OuterCutoff, 1, false, 0.01f, 0.f, FLT_MAX);

					rdbg::DeferredDrawAxis(m_environmentData.Lights[i].Position, glm::vec3(0.f), glm::vec3(1.f));
					rdbg::DeferredDrawLine(data.Position, data.Position + data.Direction, data.Color);
				}
			}
		}
		ImGui::End();
	}
}
