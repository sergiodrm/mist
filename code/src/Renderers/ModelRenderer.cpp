// Autogenerated code for vkmmc project
// Source file
#include "ModelRenderer.h"
#include "Debug.h"
#include "InitVulkanTypes.h"
#include "Shader.h"
#include "Globals.h"
#include "VulkanRenderEngine.h"
#include "SceneImpl.h"
#include "imgui_internal.h"

#include "DebugRenderer.h"
#include "GenericUtils.h"
#include "glm/ext/matrix_clip_space.inl"
#include "ModelRenderer.h"



namespace vkmmc
{
	ShadowMapPipeline::ShadowMapPipeline()
		: m_pipeline()
	{
		SetProjection(glm::radians(45.f), 16.f / 9.f);
		SetProjection(0.f, 1920.f, 0.f, 1080.f);
		SetClip(1.f, 1000.f);

		memset(m_depthMVPCache, 0, sizeof(m_depthMVPCache));
	}

	ShadowMapPipeline::~ShadowMapPipeline()
	{
		check(!m_pipeline.IsValid());
	}

	void ShadowMapPipeline::Init(const RenderContext& renderContext, VkRenderPass renderPass, DescriptorAllocator* descriptorAllocator, DescriptorLayoutCache* layoutCache)
	{
		// Depth pipeline
		VkDescriptorSetLayout depthShaderInput[2];
		DescriptorSetLayoutBuilder::Create(*layoutCache)
			.AddBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_SHADER_STAGE_VERTEX_BIT, 1)
			.Build(renderContext, &depthShaderInput[0]);
		DescriptorSetLayoutBuilder::Create(*layoutCache)
			.AddBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_SHADER_STAGE_VERTEX_BIT, 1)
			.Build(renderContext, &depthShaderInput[1]);

		// CreatePipeline
		ShaderDescription depthShader{ .Filepath = globals::DepthVertexShader, .Stage = VK_SHADER_STAGE_VERTEX_BIT };
		const VertexInputLayout inputLayout = VertexInputLayout::GetStaticMeshVertexLayout();
		m_pipeline = RenderPipeline::Create(
			renderContext,
			renderPass,
			0,
			&depthShader, 1,
			depthShaderInput, sizeof(depthShaderInput) / sizeof(VkDescriptorSetLayout), nullptr, 
			0,
			inputLayout
		);
	}

	void ShadowMapPipeline::Destroy(const RenderContext& renderContext)
	{
		m_pipeline.Destroy(renderContext);
	}

	void ShadowMapPipeline::AddFrameData(const RenderContext& renderContext, UniformBuffer* buffer, DescriptorAllocator* descAllocator, DescriptorLayoutCache* layoutCache)
	{
		// Alloc info for depthVP matrix
		buffer->AllocUniform(renderContext, UNIFORM_ID_SHADOW_MAP_VP, GetBufferSize());

		FrameData fd;
		// Alloc desc set pointing to buffer
		VkDescriptorBufferInfo depthBufferInfo = buffer->GenerateDescriptorBufferInfo(UNIFORM_ID_SHADOW_MAP_VP);
		DescriptorBuilder::Create(*layoutCache, *descAllocator)
			.BindBuffer(0, &depthBufferInfo, 1, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_SHADER_STAGE_VERTEX_BIT)
			.Build(renderContext, fd.DepthMVPSet);

		// create descriptor set for model matrix array
		VkDescriptorBufferInfo modelsBufferInfo = buffer->GenerateDescriptorBufferInfo(UNIFORM_ID_SCENE_MODEL_TRANSFORM_ARRAY);
		DescriptorBuilder::Create(*layoutCache, *descAllocator)
			.BindBuffer(0, &modelsBufferInfo, 1, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_SHADER_STAGE_VERTEX_BIT)
			.Build(renderContext, fd.ModelSet);
		m_frameData.push_back(fd);
	}

	void ShadowMapPipeline::SetClip(float nearClip, float farClip)
	{
		m_clip[0] = nearClip;
		m_clip[1] = farClip;
	}

	glm::mat4 ShadowMapPipeline::GetProjection(EShadowMapProjectionType projType) const
	{
		switch (projType)
		{
		case PROJECTION_PERSPECTIVE:
			return glm::perspective(m_perspectiveParams[0], m_perspectiveParams[1], m_clip[0], m_clip[1]);
		case PROJECTION_ORTHOGRAPHIC:
			return glm::ortho(m_orthoParams[0], m_orthoParams[1], m_orthoParams[2], m_orthoParams[3], m_clip[0], m_clip[1]);
		}
		return glm::mat4(1.f);
	}

	void ShadowMapPipeline::SetProjection(float fov, float aspectRatio)
	{
		m_perspectiveParams[0] = fov;
		m_perspectiveParams[1] = aspectRatio;
	}

	void ShadowMapPipeline::SetProjection(float minX, float maxX, float minY, float maxY)
	{
		m_orthoParams[0] = minX;
		m_orthoParams[1] = maxX;
		m_orthoParams[2] = minY;
		m_orthoParams[3] = maxY;
	}

	void ShadowMapPipeline::SetupLight(uint32_t lightIndex, const glm::vec3& lightPos, const glm::vec3& lightRot, EShadowMapProjectionType projType)
	{
		check(lightIndex < globals::MaxShadowMapAttachments);
		glm::mat4 depthView = glm::inverse(math::ToMat4(lightPos, lightRot, glm::vec3(1.f)));
		glm::mat4 depthProj = GetProjection(projType);
		depthProj[1][1] *= -1.f;
		glm::mat4 depthVP = depthProj * depthView;
		m_depthMVPCache[lightIndex] = depthVP;
	}

	void ShadowMapPipeline::FlushToUniformBuffer(const RenderContext& renderContext, UniformBuffer* buffer)
	{
		buffer->SetUniform(renderContext, UNIFORM_ID_SHADOW_MAP_VP, m_depthMVPCache, GetBufferSize());
	}

	void ShadowMapPipeline::RenderShadowMap(VkCommandBuffer cmd, const Scene* scene, uint32_t frameIndex, uint32_t lightIndex)
	{
		check(lightIndex < globals::MaxShadowMapAttachments);
		vkCmdBindPipeline(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS, m_pipeline.GetPipelineHandle());

		uint32_t depthVPOffset = sizeof(glm::mat4) * lightIndex;
		vkCmdBindDescriptorSets(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS, m_pipeline.GetPipelineLayoutHandle(),
			0, 1, &m_frameData[frameIndex].DepthMVPSet, 1, &depthVPOffset);

		scene->Draw(cmd, m_pipeline.GetPipelineLayoutHandle(), 1, m_frameData[frameIndex].ModelSet);
	}

	const glm::mat4& ShadowMapPipeline::GetDepthVP(uint32_t index) const
	{
		return m_depthMVPCache[index];
	}

	uint32_t ShadowMapPipeline::GetBufferSize() const
	{
		return sizeof(glm::mat4) * globals::MaxShadowMapAttachments;
	}

	void ShadowMapPipeline::ImGuiDraw(bool createWindow)
	{
		if (createWindow)
			ImGui::Begin("ShadowMap proj params");
		ImGui::DragFloat("Near clip", &m_clip[0], 1.f);
		ImGui::DragFloat("Far clip", &m_clip[1], 1.f);
		ImGui::DragFloat("FOV", &m_perspectiveParams[0], 0.01f);
		ImGui::DragFloat("Aspect ratio", &m_perspectiveParams[1], 0.01f);
		ImGui::DragFloat2("Ortho x", &m_orthoParams[0]);
		ImGui::DragFloat2("Ortho y", &m_orthoParams[2]);
		if (createWindow)
			ImGui::End();
	}

	ShadowMapRenderer::ShadowMapRenderer()
	{
	}

	void ShadowMapRenderer::Init(const RendererCreateInfo& info)
	{
		m_shadowMapPipeline.Init(info.RContext, info.RenderPassArray[RENDER_PASS_SHADOW_MAP], info.DescriptorAllocator, info.LayoutCache);
		for (uint32_t i = 0; i < globals::MaxOverlappedFrames; i++)
		{
			UniformBuffer* uniformBuffer = info.FrameUniformBufferArray[i];
			// Configure frame data for shadowmap
			m_shadowMapPipeline.AddFrameData(info.RContext, uniformBuffer, info.DescriptorAllocator, info.LayoutCache);
		}
	}

	void ShadowMapRenderer::Destroy(const RenderContext& renderContext)
	{
		m_shadowMapPipeline.Destroy(renderContext);
	}

	void ShadowMapRenderer::PrepareFrame(const RenderContext& renderContext, RenderFrameContext& renderFrameContext)
	{
		const Scene* scene = renderFrameContext.Scene;
		const EnvironmentData& envData = scene->GetEnvironmentData();
		//m_shadowMapPipeline.SetupLight(0, envData.DirectionalLight.Position, math::ToRot(envData.DirectionalLight.Direction), ShadowMapPipeline::PROJECTION_ORTHOGRAPHIC);

		uint32_t maxLights = __min((uint32_t)envData.ActiveSpotLightsCount, globals::MaxShadowMapAttachments);
		for (uint32_t i = 0; i < maxLights; ++i)
		{
			const SpotLightData& light = envData.SpotLights[i];
			m_shadowMapPipeline.SetupLight(i, light.Position, math::ToRot(light.Direction * -1.f), ShadowMapPipeline::PROJECTION_PERSPECTIVE);
		}
		m_shadowMapPipeline.FlushToUniformBuffer(renderContext, &renderFrameContext.GlobalBuffer);
	}

	void ShadowMapRenderer::RecordCmd(const RenderContext& renderContext, const RenderFrameContext& renderFrameContext, uint32_t attachmentIndex)
	{
		check(attachmentIndex < globals::MaxShadowMapAttachments);
		const EnvironmentData& envData = renderFrameContext.Scene->GetEnvironmentData();
		uint32_t maxLights = __min((uint32_t)envData.ActiveSpotLightsCount, globals::MaxShadowMapAttachments);
		for (uint32_t i = 0; i < maxLights; ++i)
			m_shadowMapPipeline.RenderShadowMap(renderFrameContext.GraphicsCommand, renderFrameContext.Scene, renderFrameContext.FrameIndex, attachmentIndex);
	}

	void ShadowMapRenderer::ImGuiDraw()
	{
		m_shadowMapPipeline.ImGuiDraw(true);
	}

	LightingRenderer::LightingRenderer() : IRendererBase()
	{
	}

	void LightingRenderer::Init(const RendererCreateInfo& info)
	{
		/**********************************/
		/** Pipeline layout and pipeline **/
		/**********************************/
		ShaderDescription shaderStageDescs[] =
		{
			{.Filepath = globals::BasicVertexShader, .Stage = VK_SHADER_STAGE_VERTEX_BIT},
			{.Filepath = globals::BasicFragmentShader, .Stage = VK_SHADER_STAGE_FRAGMENT_BIT}
		};

		// This pipeline use dynamic descriptors, we have to initialize descriptor set layout manually.
		VkDescriptorSetLayout layouts[3];
		uint32_t layoutCount = sizeof(layouts) / sizeof(VkDescriptorSetLayout);
		// Per frame descriptor (camera, enviro...)
		DescriptorSetLayoutBuilder::Create(*info.LayoutCache)
			.AddBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_VERTEX_BIT, 1)
			.AddBinding(1, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_VERTEX_BIT, 1)
			.AddBinding(2, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_FRAGMENT_BIT, 1)
			.AddBinding(3, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT, globals::MaxShadowMapAttachments)
			.Build(info.RContext, &layouts[0]);
		// Per draw descriptor (model, material...)
		DescriptorSetLayoutBuilder::Create(*info.LayoutCache)
			.AddBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_SHADER_STAGE_VERTEX_BIT, 1)
			.Build(info.RContext, &layouts[1]);
		layouts[2] = MaterialRenderData::GetDescriptorSetLayout(info.RContext, *info.LayoutCache);

		m_renderPipeline = RenderPipeline::Create(
			info.RContext,
			info.RenderPassArray[RENDER_PASS_LIGHTING],
			0, // subpass
			shaderStageDescs,
			sizeof(shaderStageDescs) / sizeof(ShaderDescription),
			layouts, layoutCount, nullptr, 0,
			VertexInputLayout::GetStaticMeshVertexLayout()
		);

		// Sampler for shadow map binding
		VkSamplerCreateInfo samplerInfo = vkinit::SamplerCreateInfo(VK_FILTER_LINEAR);
		vkcheck(vkCreateSampler(info.RContext.Device, &samplerInfo, nullptr, &m_depthMapSampler));

		m_frameData.resize(globals::MaxOverlappedFrames);
		for (uint32_t i = 0; i < globals::MaxOverlappedFrames; ++i)
		{
			UniformBuffer* uniformBuffer = info.FrameUniformBufferArray[i];
			
			// Configure per frame DescriptorSet.
			// Color pass
			VkDescriptorBufferInfo cameraDescInfo = uniformBuffer->GenerateDescriptorBufferInfo(UNIFORM_ID_CAMERA);
			VkDescriptorBufferInfo enviroDescInfo = uniformBuffer->GenerateDescriptorBufferInfo(UNIFORM_ID_SCENE_ENV_DATA);
			VkDescriptorBufferInfo modelsDescInfo = uniformBuffer->GenerateDescriptorBufferInfo(UNIFORM_ID_SCENE_MODEL_TRANSFORM_ARRAY);
			VkDescriptorBufferInfo lightMatrixDescInfo = uniformBuffer->GenerateDescriptorBufferInfo(UNIFORM_ID_SHADOW_MAP_VP);
			
			check(globals::MaxShadowMapAttachments == info.ShadowMapAttachments[i].size());
			VkDescriptorImageInfo shadowMapDescInfo[globals::MaxShadowMapAttachments];
			for (uint32_t j = 0; j < globals::MaxShadowMapAttachments; ++j)
			{
				shadowMapDescInfo[j].imageView = info.ShadowMapAttachments[i][j];
				shadowMapDescInfo[j].imageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
				shadowMapDescInfo[j].sampler = m_depthMapSampler;
			}
			
			// Materials have its own descriptor set (right now).

			DescriptorBuilder::Create(*info.LayoutCache, *info.DescriptorAllocator)
				.BindBuffer(0, &cameraDescInfo, 1, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_VERTEX_BIT)
				.BindBuffer(1, &lightMatrixDescInfo, 1, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_VERTEX_BIT)
				.BindBuffer(2, &enviroDescInfo, 1, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_FRAGMENT_BIT)
				.BindImage(3, shadowMapDescInfo, globals::MaxShadowMapAttachments, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT)
				.Build(info.RContext, m_frameData[i].PerFrameSet);
			DescriptorBuilder::Create(*info.LayoutCache, *info.DescriptorAllocator)
				.BindBuffer(0, &modelsDescInfo, 1, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_SHADER_STAGE_VERTEX_BIT)
				.Build(info.RContext, m_frameData[i].ModelSet);	
		}
	}

	void LightingRenderer::Destroy(const RenderContext& renderContext)
	{
		vkDestroySampler(renderContext.Device, m_depthMapSampler, nullptr);
		m_renderPipeline.Destroy(renderContext);
	}

	void LightingRenderer::PrepareFrame(const RenderContext& renderContext, RenderFrameContext& renderFrameContext)
	{
	}

	void LightingRenderer::RecordCmd(const RenderContext& renderContext, const RenderFrameContext& renderFrameContext, uint32_t attachmentIndex)
	{
		PROFILE_SCOPE(LightingRenderer_ColorPass);

		// Bind pipeline
		VkCommandBuffer cmd = renderFrameContext.GraphicsCommand;
		vkCmdBindPipeline(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS, m_renderPipeline.GetPipelineHandle());

		// Bind global descriptor sets
		VkDescriptorSet sets[] = { m_frameData[renderFrameContext.FrameIndex].PerFrameSet };
		uint32_t setCount = sizeof(sets) / sizeof(VkDescriptorSet);
		vkCmdBindDescriptorSets(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS, m_renderPipeline.GetPipelineLayoutHandle(), 0, setCount, sets, 0, nullptr);
		++GRenderStats.SetBindingCount;

		// DrawScene
		renderFrameContext.Scene->Draw(cmd, m_renderPipeline.GetPipelineLayoutHandle(), 2, 1, m_frameData[renderFrameContext.FrameIndex].ModelSet);
	}

	void LightingRenderer::ImGuiDraw()
	{
	}

}
