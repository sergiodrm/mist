// Autogenerated code for vkmmc project
// Source file
#include "QuadRenderer.h"

namespace vkmmc
{
	namespace render
	{
		VkDescriptorSet GTextureSet = VK_NULL_HANDLE;

		void DrawQuadTexture(VkDescriptorSet textureSet)
		{
			GTextureSet = textureSet;
		}
	}


	void QuadRenderer::Init(const RendererCreateInfo& info)
	{
		// Init shader
		ShaderDescription shaders[] =
		{
			{.Filepath = globals::PostProcessVertexShader, .Stage=VK_SHADER_STAGE_VERTEX_BIT},
			{.Filepath = globals::PostProcessFragmentShader, .Stage=VK_SHADER_STAGE_FRAGMENT_BIT},
		};

		VertexInputLayout inputLayout = VertexInputLayout::BuildVertexInputLayout({ EAttributeType::Float3, EAttributeType::Float2 });
		m_pipeline = RenderPipeline::Create(info.RContext, info.Pass, 0,
			shaders, sizeof(shaders) / sizeof(ShaderDescription),
			inputLayout);

		// Init vertexbuffer
		float vertices[] =
		{
			// vkscreencoords	// uvs
			-1.f, -1.f, 0.f,	0.f, 0.f,
			1.f, -1.f, 0.f,		1.f, 0.f,
			1.f, 1.f, 0.f,		1.f, 1.f,
			-1.f, 1.f, 0.f,		0.f, 1.f
		};
		BufferCreateInfo quadInfo;
		quadInfo.Data = vertices;
		quadInfo.Size = sizeof(vertices);
		m_vb.Init(info.RContext, quadInfo);

		uint32_t indices[] = { 0, 2, 1, 0, 3, 2 };
		quadInfo.Data = indices;
		quadInfo.Size = sizeof(indices);
		m_ib.Init(info.RContext, quadInfo);
	}

	void QuadRenderer::Destroy(const RenderContext& renderContext)
	{
		m_ib.Destroy(renderContext);
		m_vb.Destroy(renderContext);
		m_pipeline.Destroy(renderContext);
	}

	void QuadRenderer::PrepareFrame(const RenderContext& renderContext, RenderFrameContext& renderFrameContext)
	{
	}

	void QuadRenderer::RecordCmd(const RenderContext& renderContext, const RenderFrameContext& renderFrameContext, uint32_t attachmentIndex)
	{
		if (render::GTextureSet != VK_NULL_HANDLE)
		{
			VkCommandBuffer cmd = renderFrameContext.GraphicsCommand;
			vkCmdBindPipeline(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS, m_pipeline.GetPipelineHandle());

			vkCmdBindDescriptorSets(cmd, VK_PIPELINE_BIND_POINT_GRAPHICS, m_pipeline.GetPipelineLayoutHandle(),
				0, 1, &render::GTextureSet, 0, nullptr);
			m_vb.Bind(cmd);
			m_ib.Bind(cmd);
			vkCmdDrawIndexed(cmd, 6, 1, 0, 0, 0);
		}
	}
}
