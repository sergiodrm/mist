// Autogenerated code for Mist project
// Source file
#include "QuadRenderer.h"
#include "VulkanRenderEngine.h"

namespace Mist
{
	namespace render
	{
		VkDescriptorSet GTextureSet = VK_NULL_HANDLE;

		void DrawQuadTexture(VkDescriptorSet textureSet)
		{
			GTextureSet = textureSet;
		}
	}


	void QuadRenderer::Init(const RendererCreateInfo& info)
	{
		RenderTargetDescription rtDesc;
		rtDesc.RenderArea.extent = { .width = info.Context.Window->Width, .height = info.Context.Window->Height };
		rtDesc.AddColorAttachment(FORMAT_R32G32B32A32_SFLOAT, IMAGE_LAYOUT_PRESENT_SRC_KHR, SAMPLE_COUNT_1_BIT, { .color = {1.f, 0.f, 0.f, 1.f} });
		for (uint32_t i = 0; i < globals::MaxOverlappedFrames; ++i)
		{
			m_frameData[i].RT.Create(info.Context, rtDesc);
		}

		// Init shader
		ShaderProgramDescription shaderDesc;
		shaderDesc.VertexShaderFile = globals::PostProcessVertexShader;
		shaderDesc.FragmentShaderFile = globals::PostProcessFragmentShader;
		shaderDesc.InputLayout = VertexInputLayout::BuildVertexInputLayout({ EAttributeType::Float3, EAttributeType::Float2 });
		shaderDesc.RenderTarget = &m_frameData[0].RT;
		m_shader = ShaderProgram::Create(info.Context, shaderDesc);

		// Init vertexbuffer
		float vertices[] =
		{
			// vkscreencoords	// uvs
			-1.f, -1.f, 0.f,	0.f, 0.f,
			1.f, -1.f, 0.f,		1.f, 0.f,
			1.f, 1.f, 0.f,		1.f, 1.f,
			-1.f, 1.f, 0.f,		0.f, 1.f
		};
		BufferCreateInfo quadInfo;
		quadInfo.Data = vertices;
		quadInfo.Size = sizeof(vertices);
		m_vb.Init(info.Context, quadInfo);

		uint32_t indices[] = { 0, 2, 1, 0, 3, 2 };
		quadInfo.Data = indices;
		quadInfo.Size = sizeof(indices);
		m_ib.Init(info.Context, quadInfo);
	}

	void QuadRenderer::Destroy(const RenderContext& renderContext)
	{
		m_ib.Destroy(renderContext);
		m_vb.Destroy(renderContext);
		for (uint32_t i = 0; i < globals::MaxOverlappedFrames; ++i)
		{
			m_frameData[i].RT.Destroy(renderContext);
		}
	}

	void QuadRenderer::PrepareFrame(const RenderContext& renderContext, RenderFrameContext& renderFrameContext)
	{
	}

	void QuadRenderer::RecordCmd(const RenderContext& renderContext, const RenderFrameContext& renderFrameContext, uint32_t attachmentIndex)
	{
		VkCommandBuffer cmd = renderFrameContext.GraphicsCommand;
		BeginGPUEvent(renderContext, cmd, "QuadRenderer");
		m_frameData[renderFrameContext.FrameIndex].RT.BeginPass(cmd);
		if (render::GTextureSet != VK_NULL_HANDLE)
		{
			m_shader->UseProgram(cmd);
			m_shader->BindDescriptorSets(cmd, &render::GTextureSet, 1, 0, nullptr, 0);
			m_vb.Bind(cmd);
			m_ib.Bind(cmd);
			vkCmdDrawIndexed(cmd, 6, 1, 0, 0, 0);
		}
		m_frameData[renderFrameContext.FrameIndex].RT.EndPass(cmd);
		EndGPUEvent(renderContext, cmd);
	}

	VkImageView QuadRenderer::GetRenderTarget(uint32_t currentFrameIndex, uint32_t attachmentIndex) const
	{
		return m_frameData[currentFrameIndex].RT.GetRenderTarget(attachmentIndex);
	}
}
