// Autogenerated code for vkmmc project
// Header file

#include "Scene.h"

namespace vkmmc
{
	class Scene : public IScene
	{
	public:
		virtual RenderObject CreateRenderObject(RenderObject parent) override;
		virtual void DestroyRenderObject(RenderObject object) override;
		virtual bool IsValid(RenderObject object) const override;
		virtual uint32_t GetRenderObjectCount() const override;

		virtual RenderObject GetRoot() const override;
		virtual const Model* GetModel(RenderObject renderObject) const override;
		virtual void SetModel(RenderObject renderObject, const Model& model) override;
		virtual const char* GetRenderObjectName(RenderObject object) const override;
		virtual void SetRenderObjectName(RenderObject renderObject, const char* name) override;
		virtual const glm::mat4& GetTransform(RenderObject renderObject) const override;
		virtual void SetTransform(RenderObject renderObject, const glm::mat4& transform) override;

		void MarkAsDirty(RenderObject renderObject);
		void RecalculateTransforms();
		uint32_t Count() const { return (uint32_t)m_hierarchy.size(); }

		const glm::mat4* GetRawGlobalTransforms() const;

		const Model* GetModelArray() const;
		uint32_t GetModelCount() const;

	private:
		static constexpr uint32_t MaxNodeLevel = 16;
		std::vector<glm::mat4> m_localTransforms;
		std::vector<glm::mat4> m_globalTransforms;
		std::vector<Hierarchy> m_hierarchy;
		std::unordered_map<uint32_t, uint32_t> m_modelMap;
		std::vector<Model> m_modelArray;
		std::vector<std::string> m_names;
		std::vector<std::string> m_materialNames;

		std::vector<int32_t> m_dirtyNodes[MaxNodeLevel];
	};
}
