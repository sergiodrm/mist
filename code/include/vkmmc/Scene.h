// Autogenerated code for vkmmc project
// Header file

#pragma once

#include <vector>
#include <unordered_map>
#include <string>
#include <glm/glm.hpp>
#include "RenderObject.h"

namespace vkmmc
{
	// Forward declarations
	
	struct Hierarchy
	{
		RenderObject Parent;
		RenderObject Sibling;
		RenderObject Child;
		int32_t Level = 0;
	};

	class Scene
	{
	public:
		RenderObject NewRenderObject(RenderObject parent);
		RenderObject GetRoot() const;
		const Model* GetModel(RenderObject renderObject) const;
		void SetModel(RenderObject renderObject, const Model& model);
		void SetRenderObjectName(RenderObject renderObject, const char* name);
		const glm::mat4& GetTransform(RenderObject renderObject) const;
		void SetTransform(RenderObject renderObject, const glm::mat4& transform);
		void MarkAsDirty(RenderObject renderObject);
		void RecalculateTransforms();
		uint32_t Count() const { return (uint32_t)m_hierarchy.size(); }

		const glm::mat4* GetRawGlobalTransforms() const;

		const Model* GetModelArray() const;
		uint32_t GetModelCount() const;

	private:
		static constexpr uint32_t MaxNodeLevel = 16;
		std::vector<glm::mat4> m_localTransforms;
		std::vector<glm::mat4> m_globalTransforms;
		std::vector<Hierarchy> m_hierarchy;
		std::unordered_map<uint32_t, uint32_t> m_modelMap;
		std::vector<Model> m_modelArray;
		std::vector<std::string> m_names;
		std::vector<std::string> m_materialNames;

		std::vector<int32_t> m_dirtyNodes[MaxNodeLevel];
	};
}
