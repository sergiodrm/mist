// Autogenerated code for Mist project
// Header file

#pragma once

#include <vector>
#include <unordered_map>
#include <string>
#include <glm/glm.hpp>
#include "Render/RenderObject.h"

namespace Mist
{
	// Forward declarations
	class IRenderEngine;

	enum class ELightType
	{
		Point,
		Directional,
		Spot
	};

	const char* LightTypeToStr(ELightType);
	ELightType StrToLightType(const char* str);

	struct LightComponent
	{
		ELightType Type = ELightType::Point;
		glm::vec3 Color = {1.f, 1.f, 1.f};
		float Radius = 10.f;
		float Compression = 1.f;
		float InnerCutoff = 1.f;
		float OuterCutoff = 0.5f;
		bool ProjectShadows = false;
	};

	struct MeshComponent
	{
		char MeshAssetPath[256];
		std::string MeshName;
		uint32_t MeshIndex;

		MeshComponent() : MeshIndex(UINT32_MAX) { *MeshAssetPath = 0; }
	};
	
	struct Hierarchy
	{
		RenderObject Parent;
		RenderObject Sibling;
		RenderObject Child;
		int32_t Level = 0;
	};

	struct TransformComponent
	{
		glm::vec3 Position;
		glm::vec3 Rotation;
		glm::vec3 Scale;
	};

	void TransformComponentToMatrix(const TransformComponent* transforms, glm::mat4* matrices, uint32_t count);

	class IScene
	{
	protected:
		IScene() = default;
		virtual ~IScene() = default;
	public:
		// Scene factory
		static IScene* CreateScene(IRenderEngine* engine);
		static IScene* LoadScene(IRenderEngine* engine, const char* sceneFilepath);
		static void DestroyScene(IScene* scene);

		virtual void Init() = 0;
		virtual void Destroy() = 0;

		virtual bool LoadModel(const char* filepath) = 0;

		// Render object life cycle
		virtual RenderObject CreateRenderObject(RenderObject parent) = 0;
		virtual void DestroyRenderObject(RenderObject object) = 0;
		virtual bool IsValid(RenderObject object) const = 0;
		virtual uint32_t GetRenderObjectCount() const = 0;

		virtual Material* CreateMaterial() = 0;
		virtual Material* GetMaterial(uint32_t index) = 0;
		virtual const Material* GetMaterial(uint32_t index) const = 0;

		virtual RenderObject GetRoot() const = 0;
		virtual const char* GetRenderObjectName(RenderObject object) const = 0;
		virtual void SetRenderObjectName(RenderObject object, const char* name) = 0;
		// Render object components
		virtual const MeshComponent* GetMesh(RenderObject object) const = 0;
		virtual void SetMesh(RenderObject object, const MeshComponent& meshComponent) = 0;
		virtual const TransformComponent& GetTransform(RenderObject object) const = 0;
		virtual void SetTransform(RenderObject object, const TransformComponent& transform) = 0;
		virtual const LightComponent* GetLight(RenderObject object) const = 0;
		virtual void SetLight(RenderObject object, const LightComponent& light) = 0;

		// Create render data of meshes and materials
		virtual uint32_t SubmitMesh(Mesh& mesh) = 0;
		virtual uint32_t SubmitMaterial(Material& material) = 0;
		virtual RenderHandle LoadTexture(const char* texturePath) = 0;
	};
}
