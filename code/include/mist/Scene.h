// Autogenerated code for Mist project
// Header file

#pragma once

#include <vector>
#include <unordered_map>
#include <string>
#include <glm/glm.hpp>
#include "RenderObject.h"

namespace Mist
{
	// Forward declarations
	class IRenderEngine;

	enum class ELightType
	{
		Point,
		Directional,
		Spot
	};

	struct Light
	{
		ELightType Type;
		glm::vec3 Color;
		float Radius;
		float Compression;
		float InnerCutoff;
		float OuterCutoff;
	};
	
	struct Hierarchy
	{
		RenderObject Parent;
		RenderObject Sibling;
		RenderObject Child;
		int32_t Level = 0;
	};

	class IScene
	{
	protected:
		IScene() = default;
		virtual ~IScene() = default;
	public:
		// Scene factory
		static IScene* CreateScene(IRenderEngine* engine);
		static IScene* LoadScene(IRenderEngine* engine, const char* sceneFilepath);
		static void DestroyScene(IScene* scene);

		virtual void Init() = 0;
		virtual void Destroy() = 0;

		virtual bool LoadModel(const char* filepath) = 0;

		// Render object life cycle
		virtual RenderObject CreateRenderObject(RenderObject parent) = 0;
		virtual void DestroyRenderObject(RenderObject object) = 0;
		virtual bool IsValid(RenderObject object) const = 0;
		virtual uint32_t GetRenderObjectCount() const = 0;

		virtual RenderObject GetRoot() const = 0;
		virtual const char* GetRenderObjectName(RenderObject object) const = 0;
		virtual void SetRenderObjectName(RenderObject object, const char* name) = 0;
		// Render object components
		virtual const Mesh* GetMesh(RenderObject object) const = 0;
		virtual void SetMesh(RenderObject object, const Mesh& mesh) = 0;
		virtual const glm::mat4& GetTransform(RenderObject object) const = 0;
		virtual void SetTransform(RenderObject object, const glm::mat4& transform) = 0;
		virtual const Light* GetLight(RenderObject object) const = 0;
		virtual void SetLight(RenderObject object, const Light& light) = 0;

		// Create render data of meshes and materials
		virtual void SubmitMesh(Mesh& mesh) = 0;
		virtual void SubmitMaterial(Material& material) = 0;
		virtual RenderHandle LoadTexture(const char* texturePath) = 0;
	};
}
